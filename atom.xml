<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xvirt</title>
  
  <subtitle>eXtensible VIRTuliaztion</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="xvirt.ink/"/>
  <updated>2021-01-24T02:37:44.767Z</updated>
  <id>xvirt.ink/</id>
  
  <author>
    <name>Henry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Papers</title>
    <link href="xvirt.ink/2021/01/13/papers/"/>
    <id>xvirt.ink/2021/01/13/papers/</id>
    <published>2021-01-13T13:23:01.000Z</published>
    <updated>2021-01-24T02:37:44.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="the-Computer-Architecture"><a href="#the-Computer-Architecture" class="headerlink" title="the Computer Architecture"></a>the Computer Architecture</h3><ul><li><a href="http://abelgo.cn/cs101/papers/Neumann.pdf" target="_blank" rel="noopener">The First Draft Report on the EDVAC</a>, 1945</li></ul><h3 id="the-Cloud"><a href="#the-Cloud" class="headerlink" title="the Cloud"></a>the Cloud</h3><ul><li><a href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-28.pdf" target="_blank" rel="noopener">Above the Clouds: A Berkeley View of Cloud Computing</a>, 2009</li><li><a href="https://arxiv.org/pdf/1807.11248.pdf" target="_blank" rel="noopener">Comparison of FaaS Orchestration Systems</a>, 2018</li><li><a href="https://www.usenix.org/system/files/osdi18-klimovic.pdf" target="_blank" rel="noopener">Pocket: Elastic Ephemeral Storage for Serverless Analytics</a>, 2018</li><li><a href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.pdf" target="_blank" rel="noopener">Cloud Programming Simplified: A Berkeley View on Serverless Computing</a>, 2019</li></ul><h3 id="the-AI"><a href="#the-AI" class="headerlink" title="the AI"></a>the AI</h3><ul><li><a href="https://arxiv.org/pdf/1712.05855.pdf" target="_blank" rel="noopener">A Berkeley View of Systems Challenges for AI</a>, 2017</li></ul><h3 id="the-Industrial-Practice"><a href="#the-Industrial-Practice" class="headerlink" title="the Industrial Practice"></a>the Industrial Practice</h3><ul><li><a href="https://people.freebsd.org/~lstewart/articles/cpumemory.pdf" target="_blank" rel="noopener">What Every Programmer Should Know About Memory</a>, 2007</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;the-Computer-Architecture&quot;&gt;&lt;a href=&quot;#the-Computer-Architecture&quot; class=&quot;headerlink&quot; title=&quot;the Computer Architecture&quot;&gt;&lt;/a&gt;the Compute
      
    
    </summary>
    
      <category term="quotes" scheme="xvirt.ink/categories/quotes/"/>
    
    
      <category term="paper" scheme="xvirt.ink/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>The KVM Weather Report</title>
    <link href="xvirt.ink/2020/11/22/kvm-weather-report/"/>
    <id>xvirt.ink/2020/11/22/kvm-weather-report/</id>
    <published>2020-11-22T11:23:01.000Z</published>
    <updated>2020-11-22T12:43:41.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-Reports"><a href="#The-Reports" class="headerlink" title="The Reports"></a>The Reports</h3><ul><li><a href="https://events.static.linuxfound.org/slides/2011/linuxcon-japan/lcj2011_kvm_weather_report.pdf" target="_blank" rel="noopener">The KVM Weather Report, Jes Sorensen, 2011</a></li><li><a href="https://events.static.linuxfound.org/sites/events/files/cojp13_natapov.pdf" target="_blank" rel="noopener">KVM Weather Report, Gleb Natapov, 2013</a></li><li><a href="https://events.static.linuxfound.org/sites/events/files/cojp13_quintela.pdf" target="_blank" rel="noopener">KVM Live Migration: Weather forecast, Juan Quintela, 2013</a></li><li><a href="https://www.socallinuxexpo.org/sites/default/files/presentations/kvm-weather-report.pdf" target="_blank" rel="noopener">KVM Weather Report, Amit Shah, 2016</a></li></ul><h3 id="More-for-aarch64"><a href="#More-for-aarch64" class="headerlink" title="More for aarch64"></a>More for aarch64</h3><ul><li><a href="http://www.cs.columbia.edu/~nieh/pubs/asplos2014_kvmarm.pdf" target="_blank" rel="noopener">KVM/ARM: The Design and Implementation of the Linux ARM Hypervisor, Christoffer Dall, Jason Nieh, 2014</a></li><li><a href="https://hkg15.pathable.com/static/attachments/112961/1424963684.pdf?1424963684" target="_blank" rel="noopener">KVM/arm64 Architectural Evoluations, Marc Zyngier, 2015</a></li><li><a href="https://events.static.linuxfound.org/sites/events/files/slides/KoreaLinuxForum2015.pdf" target="_blank" rel="noopener">ARM-KVM: Weather Report Korea Linux Forum, Mario Smarduch, 2015</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;The-Reports&quot;&gt;&lt;a href=&quot;#The-Reports&quot; class=&quot;headerlink&quot; title=&quot;The Reports&quot;&gt;&lt;/a&gt;The Reports&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://events.stat
      
    
    </summary>
    
      <category term="quotes" scheme="xvirt.ink/categories/quotes/"/>
    
    
      <category term="KVM" scheme="xvirt.ink/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>Expert &amp; Association Map</title>
    <link href="xvirt.ink/2020/10/28/expert-association-map/"/>
    <id>xvirt.ink/2020/10/28/expert-association-map/</id>
    <published>2020-10-28T14:23:01.000Z</published>
    <updated>2021-01-24T10:07:34.413Z</updated>
    
    <content type="html"><![CDATA[<p>Build a map of technical experts and associations, try to stand on the shoulder of giants :)</p><h3 id="Experts"><a href="#Experts" class="headerlink" title="Experts"></a>Experts</h3><ul><li>Computer Scientists<ul><li><a href="https://scholar.google.com.sg/citations?hl=en&amp;user=tp07xT0AAAAJ" target="_blank" rel="noopener">John L. Hennessy</a>: Stanford University, <a href="https://scholar.google.com.sg/scholar?hl=en&amp;as_sdt=0%2C5&amp;q=John+L.+Hennessy&amp;btnG=" target="_blank" rel="noopener">scholar links</a></li><li><a href="https://scholar.google.com.sg/citations?user=Wj4ZBFIAAAAJ&amp;hl=en&amp;oi=sra" target="_blank" rel="noopener">David A. Patterson</a>: Professor of Computer Science, UC Berkeley, <a href="https://scholar.google.com.sg/scholar?hl=en&amp;as_sdt=0%2C5&amp;q=David+A.+Patterson&amp;btnG=" target="_blank" rel="noopener">scholar links</a></li></ul></li><li>Maintainors<ul><li>KVM &amp; Qemu: <a href="https://scholar.google.com.sg/scholar?hl=en&amp;as_sdt=0%2C5&amp;q=Gleb+Natapov&amp;btnG=" target="_blank" rel="noopener">Gleb Natapov</a>, <a href="https://scholar.google.com.sg/scholar?hl=en&amp;as_sdt=0%2C5&amp;q=Paolo+Bonzini&amp;btnG=" target="_blank" rel="noopener">Paolo Bonzini</a></li></ul></li><li>Industry<ul><li>James B. Keller, a Microprocessor Engineer, <a href="https://scholar.google.com.sg/scholar?hl=en&amp;as_sdt=0%2C5&amp;q=James+B.+Keller&amp;btnG=" target="_blank" rel="noopener">scholar links</a></li><li>Gerard Williams III, a Senior Director at Apple and Chief CPU Architect for nearly a decade</li></ul></li></ul><h3 id="Associations"><a href="#Associations" class="headerlink" title="Associations"></a>Associations</h3><ul><li>General: standard organizations, industry associations and conferences<ul><li><a href="https://www.acm.org" target="_blank" rel="noopener">ACM</a>: Association for Computing Machinery, e.g. <a href="https://dl.acm.org/conference/vee" target="_blank" rel="noopener">VEE</a></li><li><a href="http://ietf.org" target="_blank" rel="noopener">IETF</a>: Internet Engineering Task Force</li><li><a href="https://www.ieee.org/" target="_blank" rel="noopener">IEEE</a>: Institute of Electrical and Electronics Engineers</li><li><a href="https://www.ccf.org.cn" target="_blank" rel="noopener">CCF</a>: China Computer Federation</li><li><a href="https://www.usenix.org/" target="_blank" rel="noopener">usenix</a>: <a href="https://www.usenix.org/conferences" target="_blank" rel="noopener">conferences</a>, OSDI, NSDI</li><li><a href="https://www.linaro.org/events/" target="_blank" rel="noopener">Linaro Events</a></li></ul></li><li>Network: standard organizations, industry associations and conferences<ul><li><a href="https://www.tiaonline.org" target="_blank" rel="noopener">TIA</a>: Telecommunications Industry Association</li><li><a href="http://www.incits.org" target="_blank" rel="noopener">INCITS</a>: the InterNational Committee for Information Technology Standards</li><li><a href="http://www.sigcomm.org" target="_blank" rel="noopener">SIGCOMM</a>: SIGCOMM is ACM’s professional forum for discussing communications and computer networks</li><li><a href="https://www.oasis-open.org/committees/" target="_blank" rel="noopener">OASIS Technical Committees</a>: <a href="https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=virtio" target="_blank" rel="noopener">virtio</a> etc.</li></ul></li><li>Hypervisor: standard organizations, industry associations and conferences<ul><li><a href="https://events.linuxfoundation.org/events/kvm-forum" target="_blank" rel="noopener">KVM Forum</a></li><li><a href="https://events.docker.com/events/dockercon/" target="_blank" rel="noopener">DockerCon</a></li><li><a href="https://www.cncf.io/" target="_blank" rel="noopener">CNCF</a>: cloud native computing foundation</li></ul></li><li>Storage: standard organizations, industry associations and conferences<ul><li><a href="https://nvmexpress.org" target="_blank" rel="noopener">NVMe</a></li><li><a href="https://www.snia.org/" target="_blank" rel="noopener">SNIA</a>: Storage Networking Industry Association</li><li><a href="https://www.snia.org/events/storage-developer" target="_blank" rel="noopener">SDC</a>: Storage Developer Conference</li></ul></li><li>Chips<ul><li><a href="https://www.hotchips.org/" target="_blank" rel="noopener">Hot Chips</a>: A Symposium on High Performance Chips</li></ul></li><li>Startups<ul><li><a href="https://nuviainc.com/" target="_blank" rel="noopener">NUVIA</a> 2019, <a href="https://nuviainc.com/category/news/blog/" target="_blank" rel="noopener">blogs</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Build a map of technical experts and associations, try to stand on the shoulder of giants :)&lt;/p&gt;
&lt;h3 id=&quot;Experts&quot;&gt;&lt;a href=&quot;#Experts&quot; clas
      
    
    </summary>
    
      <category term="quotes" scheme="xvirt.ink/categories/quotes/"/>
    
    
      <category term="expert" scheme="xvirt.ink/tags/expert/"/>
    
      <category term="association" scheme="xvirt.ink/tags/association/"/>
    
  </entry>
  
  <entry>
    <title>AWS Virtualization</title>
    <link href="xvirt.ink/2020/08/02/aws-virtualization/"/>
    <id>xvirt.ink/2020/08/02/aws-virtualization/</id>
    <published>2020-08-02T02:23:01.000Z</published>
    <updated>2020-08-02T03:33:49.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AWS-Virtualization-Evolution-History"><a href="#AWS-Virtualization-Evolution-History" class="headerlink" title="AWS Virtualization Evolution History"></a>AWS Virtualization Evolution History</h3><p>AWS virtualization evolution history: cpu/memory, io(network, storage), hypervisor.<br><img src="aws-ec2-types.png" alt="AWS Virtualization Evolution History"></p><h3 id="AWS-Nitro-System"><a href="#AWS-Nitro-System" class="headerlink" title="AWS Nitro System"></a>AWS Nitro System</h3><p>AWS nitro system: nitro card, nitro security chip, nitro hypervisor.</p><ul><li>Nitro System<br><img src="aws-nitro-three-parts.png" alt="AWS Nitro System"></li><li>Nitro Diagram：simple and clean<br><img src="nitro-diagram.png" alt="AWS Nitro Diagram：simple and clean"></li><li>Nitro hypervisor based on KVM<br><img src="c5-nitro-hypervisor-based-on-kvm-with-custom-vmm.png" alt="Nitro hypervisor"></li><li>Nitro hypervisor jitter：close to bare metal performance<br><img src="nitro-hypervisor-jitter.png" alt="Nitro hypervisor jitter"></li><li>Nitro next: has published Graviton(arm) and amd instance, closed-loop of public cloud ecology</li></ul><h3 id="A-Tip-of-AWS-Ecosystem-Strategy"><a href="#A-Tip-of-AWS-Ecosystem-Strategy" class="headerlink" title="A Tip of AWS Ecosystem Strategy"></a>A Tip of AWS Ecosystem Strategy</h3><ul><li>Alliance with vmware, seize traditional IT customers, and lead the data to AWS(Data is the portal)<br><img src="alliance-with-vmware.png" alt="Alliance with vmware"></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://www.brendangregg.com/blog/2017-11-29/aws-ec2-virtualization-2017.html" target="_blank" rel="noopener">AWS EC2 Virtualization 2017: Introducing Nitro</a></li><li><a href="https://www.youtube.com/watch?v=LabltEXk0VQ" target="_blank" rel="noopener">AWS re:Invent 2017: C5 Instances and the Evolution of Amazon EC2 Virtualization (CMP332)</a></li><li><a href="http://aws-de-media.s3.amazonaws.com/images/AWS_Summit_2018/June7/Alexandria/Introducing-Nitro.pdf" target="_blank" rel="noopener">AWS EC2 Virtualization: Introducing Nitro</a></li><li><a href="https://www.youtube.com/watch?v=rUY-00yFlE4" target="_blank" rel="noopener">AWS re:Invent 2019: Powering next-gen Amazon EC2: Deep dive into the Nitro system (CMP303-R2)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;AWS-Virtualization-Evolution-History&quot;&gt;&lt;a href=&quot;#AWS-Virtualization-Evolution-History&quot; class=&quot;headerlink&quot; title=&quot;AWS Virtualization E
      
    
    </summary>
    
      <category term="virtualization" scheme="xvirt.ink/categories/virtualization/"/>
    
    
      <category term="aws nitro" scheme="xvirt.ink/tags/aws-nitro/"/>
    
      <category term="virtualization" scheme="xvirt.ink/tags/virtualization/"/>
    
  </entry>
  
  <entry>
    <title>Binary Index Tree</title>
    <link href="xvirt.ink/2020/01/10/binary-index-tree/"/>
    <id>xvirt.ink/2020/01/10/binary-index-tree/</id>
    <published>2020-01-10T13:23:01.000Z</published>
    <updated>2020-01-10T13:45:57.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Binary-Index-Tree"><a href="#Binary-Index-Tree" class="headerlink" title="Binary Index Tree"></a>Binary Index Tree</h3><p>Binary Indexed Tree also called Fenwick Tree provides a way to represent an array of numbers in an array, allowing prefix sums to be calculated efficiently. For example, an array [2, 3, -1, 0, 6] is given, then the prefix sum of first 3 elements [2, 3, -1] is 2 + 3 + -1 = 4. Calculating prefix sum efficiently is useful in various scenarios. Let’s start with a simple problem.</p><pre><code>Problem:Description of GCD SumFunction F is defined as,F(x) = GCD(1,x) + GCD(2,x) + ... + GCD(x,x)where GCD is the Greatest Common Divisor.Given an array A of size N, there are 2 types of queries:1. C X Y : Compute the value of (F(A[X]) + F(A[X+1]) + F(A[X+2]) + ... + F(A[Y])) (mod(10^9 + 7))2. U X Y: Update the element of array A[X] = YInput:First line of input contains integer N, size of the array.Next line contains N space separated integers the elements of A.Next line contains integer Q, number of queries.Next Q lines contains one of the two queries.Output:For each of the first type of query, output the required sum mod(10^9 + 7).Constraints:1&lt;=N&lt;=10^61&lt;=Q&lt;=10^51&lt;=A[i]&lt;=5*10^5For update,1&lt;=X&lt;=N1&lt;=Y&lt;5*10^5For compute,1&lt;=X&lt;=Y&lt;=NSAMPLE INTPU:33 4 36C 1 2C 1 3C 3 3U 1 4C 1 3C 1 2SAMPLE OUTPUT:131852116</code></pre><h3 id="Binarty-Index-Tree-Layout"><a href="#Binarty-Index-Tree-Layout" class="headerlink" title="Binarty Index Tree Layout"></a>Binarty Index Tree Layout</h3><p>//for ease, we make sure our given array is 1-based indexed<br>int a[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};<br><img src="binary-index-tree.jpg" alt="Binary Index Tree Layout"></p><h3 id="Code-Implementation"><a href="#Code-Implementation" class="headerlink" title="Code Implementation"></a>Code Implementation</h3><ul><li><p>Main</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">#define V_MAX (500000 + 1)</span><br><span class="line">#define MOD_BASE (1000000000 + 7)</span><br><span class="line"></span><br><span class="line">//#define DBG(f_, ...) do &#123; printf((f_), ##__VA_ARGS__); &#125; while(0)</span><br><span class="line">#define DBG(f_, ...)</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int *arr;</span><br><span class="line">    long long *BIT;</span><br><span class="line">    int i, size, opts, value;</span><br><span class="line">    long long phi[V_MAX], sums[V_MAX];</span><br><span class="line">    char opt;</span><br><span class="line">    int x, y;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d\n&quot;, &amp;size);</span><br><span class="line">    arr = malloc(sizeof(int) * (size + 1));</span><br><span class="line">    if (!arr) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    BIT = malloc(sizeof(long long) * (size + 1));</span><br><span class="line">    if (!BIT) &#123;</span><br><span class="line">        free(arr);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    memset(arr, 0, sizeof(int) * (size + 1));</span><br><span class="line">    memset(BIT, 0, sizeof(int) * (size + 1));</span><br><span class="line">    </span><br><span class="line">    memset(phi, 0, sizeof(phi));</span><br><span class="line">    memset(sums, 0, sizeof(sums));</span><br><span class="line">    SumOfGCDs(sums, phi, V_MAX);</span><br><span class="line">    </span><br><span class="line">    DBG(&quot;Array size %d\n&quot;, size);</span><br><span class="line">    i = 0;</span><br><span class="line">    while ((++i) &lt;= size &amp;&amp; (scanf(&quot;%d&quot;, &amp;value) != EOF)) &#123;</span><br><span class="line">        if (value &gt;= V_MAX) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[i] = sums[value];</span><br><span class="line">        Update(BIT, i, arr[i], size);</span><br><span class="line">        </span><br><span class="line">        DBG(&quot;arr[%d] = %d, gcdsum=%d\n&quot;, i, value, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d\n&quot;, &amp;opts);</span><br><span class="line">    DBG(&quot;Options %d\n&quot;, opts);</span><br><span class="line">    i = 0;</span><br><span class="line">    while ((++i) &lt;= opts &amp;&amp; (scanf(&quot;%c %d %d\n&quot;, &amp;opt, &amp;x, &amp;y) != EOF)) &#123;</span><br><span class="line">        int nValue;</span><br><span class="line">        </span><br><span class="line">        DBG(&quot;Opt: %c %d %d\n&quot;, opt, x, y);</span><br><span class="line">        switch (opt) &#123;</span><br><span class="line">            case &apos;C&apos;:</span><br><span class="line">                printf(&quot;%d\n&quot;, (Query(BIT, y) - Query(BIT, x - 1)) % MOD_BASE);</span><br><span class="line">                break;</span><br><span class="line">            case &apos;U&apos;:</span><br><span class="line">                nValue = sums[y];</span><br><span class="line">                Update(BIT, x, -arr[x], size);</span><br><span class="line">                Update(BIT, x, nValue, size);</span><br><span class="line">                arr[x] = nValue;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free(arr);</span><br><span class="line">    free(BIT);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Construct&amp;Update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void Update(long long *BIT, int idx, long long diff, int n)</span><br><span class="line">&#123;</span><br><span class="line">    for (; idx &lt;= n; idx += (idx &amp; (-idx))) &#123;</span><br><span class="line">        BIT[idx] += diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Query</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">long long Query(long long *BIT, int idx)</span><br><span class="line">&#123;</span><br><span class="line">    long long sum = 0;</span><br><span class="line">    </span><br><span class="line">    for (; idx &gt; 0; idx -= (idx &amp; (-idx))) &#123;</span><br><span class="line">        sum += BIT[idx];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Euler’s Totient function</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// Precomputation of phi[] numbers. Refer below link </span><br><span class="line">// for details : https://goo.gl/LUqdtY </span><br><span class="line">void ComputeTotient(long long *phi, int size) </span><br><span class="line">&#123;</span><br><span class="line">    int i, j;</span><br><span class="line">    </span><br><span class="line">    // Refer https://goo.gl/LUqdtY </span><br><span class="line">    phi[1] = 1; </span><br><span class="line">    for (i = 2; i &lt; size; i++) &#123;</span><br><span class="line">        if (!phi[i]) &#123;</span><br><span class="line">            phi[i] = i - 1; </span><br><span class="line">            </span><br><span class="line">            for (j = (i &lt;&lt; 1); j &lt; size; j += i) &#123;</span><br><span class="line">                if (!phi[j])</span><br><span class="line">                    phi[j] = j;</span><br><span class="line">  </span><br><span class="line">                phi[j] = (phi[j]/i) * (i - 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SumOfGCDs(long long *sums, long long *phi, int size)</span><br><span class="line">&#123;</span><br><span class="line">    int i, j, k;</span><br><span class="line">    </span><br><span class="line">    ComputeTotient(phi, size);</span><br><span class="line">    </span><br><span class="line">    for (i = 1; i &lt; size; i++) &#123;</span><br><span class="line">        // Iterate throght all the divisors </span><br><span class="line">        // of i. </span><br><span class="line">        for (j = i, k = 1; j &lt; size; j += i, k++) &#123;</span><br><span class="line">            sums[j] += (i*phi[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Cautions<br>– sum overflow, so with long long<br>– index 0 is ommited of BIT array</p></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.hackerearth.com/zh/practice/" target="_blank" rel="noopener">HackerEarth Practice</a></li><li><a href="https://www.hackerearth.com/zh/practice/algorithms/searching/linear-search/tutorial/" target="_blank" rel="noopener">HackerEarth Algorithms</a></li><li><a href="https://www.hackerearth.com/zh/practice/data-structures/advanced-data-structures/segment-trees/tutorial/" target="_blank" rel="noopener">HackerEarth Data Structure</a></li><li><a href="https://www.geeksforgeeks.org/summation-gcd-pairs-n/" target="_blank" rel="noopener">Summation of GCD of all the pairs up to N</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Binary-Index-Tree&quot;&gt;&lt;a href=&quot;#Binary-Index-Tree&quot; class=&quot;headerlink&quot; title=&quot;Binary Index Tree&quot;&gt;&lt;/a&gt;Binary Index Tree&lt;/h3&gt;&lt;p&gt;Binary Ind
      
    
    </summary>
    
      <category term="algorithm" scheme="xvirt.ink/categories/algorithm/"/>
    
    
      <category term="fenwick tree" scheme="xvirt.ink/tags/fenwick-tree/"/>
    
      <category term="binary index tree" scheme="xvirt.ink/tags/binary-index-tree/"/>
    
  </entry>
  
  <entry>
    <title>Segment Tree</title>
    <link href="xvirt.ink/2020/01/05/segment-tree/"/>
    <id>xvirt.ink/2020/01/05/segment-tree/</id>
    <published>2020-01-05T08:23:01.000Z</published>
    <updated>2020-01-10T13:40:43.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Segment-Tree"><a href="#Segment-Tree" class="headerlink" title="Segment Tree"></a>Segment Tree</h3><p>Segment Tree is used in cases where there are multiple range queries on array and modifications of elements of the same array. For example, finding the sum of all the elements in an array from indices  L to R, or finding the minimum (famously known as Range Minumum Query problem) of all the elements in an array from indices L to R. </p><pre><code>Problem:Description of Range Minimum QueryGiven an array A of size N, there are two types of queries on this array.  1 qlr: In this query you need to print the minimum in the sub-array A[l:r].  2 uxy: In this query you need to update A[x]=y.Input:First line of the test case contains two integers, N and Q, size of array A and number of queries.Second line contains N space separated integers, elements of A.Next Q lines contain one of the two queries.Output:For each type 1 query, print the minimum element in the sub-array A[l:r].Contraints:1&lt;=N,Q,y&lt;=10^51&lt;=l,r,x&lt;=NSAMPLE INPUT5 51 5 2 4 3q 1 5q 1 3q 3 5u 3 6q 1 5SAMPLE OUTPUT 1121</code></pre><h3 id="Segment-Tree-Layout"><a href="#Segment-Tree-Layout" class="headerlink" title="Segment Tree Layout"></a>Segment Tree Layout</h3><p><img src="problem-tree.png" alt="Segment Tree Layout"></p><h3 id="Code-Implementation"><a href="#Code-Implementation" class="headerlink" title="Code Implementation"></a>Code Implementation</h3><ul><li><p>Main</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;limits.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int Power2RoundUp(int size)</span><br><span class="line">&#123;</span><br><span class="line">    int cnt = 0;</span><br><span class="line">    </span><br><span class="line">    do &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        size = (size &gt;&gt; 1);</span><br><span class="line">    &#125; while (size &gt; 0);</span><br><span class="line">    </span><br><span class="line">    return (1 &lt;&lt; (cnt + 1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void PrintfSegTree(int *st, int size, int init)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;----------\n&quot;);</span><br><span class="line">    for (i = 0; i &lt; size; i++) &#123;</span><br><span class="line">        if (st[i] != init) &#123;</span><br><span class="line">            printf(&quot;%d: %d\n&quot;, i, st[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Write your code here</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int size, roundUp, opts;</span><br><span class="line">    int *arr, *st;</span><br><span class="line">    char opt;</span><br><span class="line">    int x, y;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d %d\n&quot;, &amp;size, &amp;opts);</span><br><span class="line">    if (size &lt;= 0) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    roundUp = Power2RoundUp(size);</span><br><span class="line">    arr = malloc(sizeof(int) * size);</span><br><span class="line">    st = malloc(sizeof(int) * roundUp);</span><br><span class="line">    if (!arr || !st) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    i = 0;</span><br><span class="line">    while ((++i) &lt;= size &amp;&amp; (scanf(&quot;%d&quot;, &amp;arr[i - 1]) != EOF)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    for (i = 0; i &lt; roundUp; i++) &#123;</span><br><span class="line">        st[i] = INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    ConstructSegTree(st, arr, size);</span><br><span class="line">    //PrintfSegTree(st, roundUp, INT_MAX);</span><br><span class="line">    </span><br><span class="line">    i = 0;</span><br><span class="line">    while ((++i) &lt;= opts &amp;&amp; (scanf(&quot;\n%c %d %d&quot;, &amp;opt, &amp;x, &amp;y) != EOF)) &#123;</span><br><span class="line">        int target;</span><br><span class="line">        </span><br><span class="line">        switch (opt) &#123;</span><br><span class="line">            case &apos;q&apos;:</span><br><span class="line">                target = INT_MAX;</span><br><span class="line">                QuerySegTree(st, 1, 0, size - 1, x - 1, y - 1, &amp;target);</span><br><span class="line">                printf(&quot;%d\n&quot;, target);</span><br><span class="line">                break;</span><br><span class="line">            case &apos;u&apos;:</span><br><span class="line">                //PrintfSegTree(st, roundUp, INT_MAX);</span><br><span class="line">                UpdateSegTree(st, 1, 0, size - 1, x - 1, y);</span><br><span class="line">                //PrintfSegTree(st, roundUp, INT_MAX);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free(arr);</span><br><span class="line">    free(st);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Construct</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void _Construct(int *st, int sti, int *arr, int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l == r) &#123;</span><br><span class="line">        st[sti] = arr[l];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _Construct(st, 2 * sti, arr, l, (l + r) / 2);</span><br><span class="line">    _Construct(st, 2 * sti + 1, arr, (l + r) / 2 + 1, r);</span><br><span class="line">    </span><br><span class="line">    st[sti] = st[2 * sti] &lt; st[2 * sti + 1] ? st[2 * sti] : st[2 * sti + 1] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ConstructSegTree(int *st, int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">    _Construct(st , 1, arr, 0, size - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void UpdateSegTree(int *st, int sti, int l, int r, int idx, int value)</span><br><span class="line">&#123;</span><br><span class="line">    if (idx &lt; l || idx &gt; r) &#123; // not in range</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (l == r &amp;&amp; idx == l) &#123;</span><br><span class="line">        st[sti] = value;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UpdateSegTree(st, 2 * sti, l, (l + r) / 2, idx, value);</span><br><span class="line">    UpdateSegTree(st, 2 * sti + 1, (l + r) / 2 + 1, r, idx, value);</span><br><span class="line">    </span><br><span class="line">    st[sti] = st[2 * sti] &lt; st[2 * sti + 1] ? st[2 * sti] : st[2 * sti + 1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Query</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void QuerySegTree(int *st, int sti, int l, int r, int ql, int qr, int *target)</span><br><span class="line">&#123;</span><br><span class="line">    if (r &lt; ql || l &gt; qr) &#123; // out query range</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (ql &lt;= l &amp;&amp; r &lt;= qr) &#123; // in query range</span><br><span class="line">        if (st[sti] &lt; *target) &#123;</span><br><span class="line">            *target = st[sti];</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    QuerySegTree(st, 2 * sti, l, (l + r) / 2, ql, qr, target);</span><br><span class="line">    QuerySegTree(st, 2 * sti + 1, (l + r) / 2 + 1, r, ql, qr, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Cautions<br>– index 0 is ommited of segment tree array</p></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.hackerearth.com/zh/practice/" target="_blank" rel="noopener">HackerEarth Practice</a></li><li><a href="https://www.hackerearth.com/zh/practice/algorithms/searching/linear-search/tutorial/" target="_blank" rel="noopener">HackerEarth Algorithms</a></li><li><a href="https://www.hackerearth.com/zh/practice/data-structures/advanced-data-structures/segment-trees/tutorial/" target="_blank" rel="noopener">HackerEarth Data Structure</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Segment-Tree&quot;&gt;&lt;a href=&quot;#Segment-Tree&quot; class=&quot;headerlink&quot; title=&quot;Segment Tree&quot;&gt;&lt;/a&gt;Segment Tree&lt;/h3&gt;&lt;p&gt;Segment Tree is used in cases 
      
    
    </summary>
    
      <category term="algorithm" scheme="xvirt.ink/categories/algorithm/"/>
    
    
      <category term="segment tree" scheme="xvirt.ink/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm: Graph</title>
    <link href="xvirt.ink/2019/12/01/algorithm-graph/"/>
    <id>xvirt.ink/2019/12/01/algorithm-graph/</id>
    <published>2019-12-01T06:51:13.000Z</published>
    <updated>2019-12-01T08:34:34.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DFS-and-BFS"><a href="#DFS-and-BFS" class="headerlink" title="DFS and BFS"></a>DFS and BFS</h1><p>DFS with recursive, while BFS with queue, caution for loops.</p><p>DFS pseudocode steps:<br>I. if node is Null return<br>II. access node<br>III. access left node, recursive<br>IV. access right node, recursive<br><img src="DFS.png" alt="DFS"></p><p>BFS pseudocode steps:<br>I. create queue<br>II. if node is not Null<br>III. push left/right node in queue<br>IV. pop queue, goto step II<br><img src="BFS.png" alt="BFS"></p><h1 id="Shortest-Path-Algorithm"><a href="#Shortest-Path-Algorithm" class="headerlink" title="Shortest Path Algorithm"></a>Shortest Path Algorithm</h1><ul><li><p><a href="https://www.geeksforgeeks.org/floyd-warshall-algorithm-dp-16/" target="_blank" rel="noopener">Floyd Warshall Algorithm</a><br><strong>All Pairs Shortest Path problem</strong><br>We initialize the solution matrix same as the input graph matrix as a first step. Then we update the solution matrix by considering all vertices as an intermediate vertex. The idea is to one by one pick all vertices and updates all shortest paths which include the picked vertex as an intermediate vertex in the shortest path. When we pick vertex number k as an intermediate vertex, we already have considered vertices {0, 1, 2, .. k-1} as intermediate vertices. For every pair (i, j) of the source and destination vertices respectively, there are two possible cases.<br>1) k is not an intermediate vertex in shortest path from i to j. We keep the value of dist[i][j] as it is.<br>2) k is an intermediate vertex in shortest path from i to j. We update the value of dist[i][j] as dist[i][k] + dist[k][j] if dist[i][j] &gt; dist[i][k] + dist[k][j]<br>The following figure shows the above optimal substructure property in the all-pairs shortest path problem.<br><img src="Floyd Warshall Algorithm.jpg" alt="Floyd Warshall Algorithm"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// Solves the all-pairs shortest path problem using Floyd Warshall algorithm </span><br><span class="line">void floydWarshall (int graph[][V]) </span><br><span class="line">&#123; </span><br><span class="line">    /* dist[][] will be the output matrix that will finally have the shortest  </span><br><span class="line">      distances between every pair of vertices */</span><br><span class="line">    int dist[V][V], i, j, k; </span><br><span class="line">  </span><br><span class="line">    /* Initialize the solution matrix same as input graph matrix. Or  </span><br><span class="line">       we can say the initial values of shortest distances are based </span><br><span class="line">       on shortest paths considering no intermediate vertex. */</span><br><span class="line">    for (i = 0; i &lt; V; i++) </span><br><span class="line">        for (j = 0; j &lt; V; j++) </span><br><span class="line">            dist[i][j] = graph[i][j]; </span><br><span class="line">  </span><br><span class="line">    /* Add all vertices one by one to the set of intermediate vertices. </span><br><span class="line">      ---&gt; Before start of an iteration, we have shortest distances between all </span><br><span class="line">      pairs of vertices such that the shortest distances consider only the </span><br><span class="line">      vertices in set &#123;0, 1, 2, .. k-1&#125; as intermediate vertices. </span><br><span class="line">      ----&gt; After the end of an iteration, vertex no. k is added to the set of </span><br><span class="line">      intermediate vertices and the set becomes &#123;0, 1, 2, .. k&#125; */</span><br><span class="line">    for (k = 0; k &lt; V; k++) </span><br><span class="line">    &#123; </span><br><span class="line">        // Pick all vertices as source one by one </span><br><span class="line">        for (i = 0; i &lt; V; i++) </span><br><span class="line">        &#123; </span><br><span class="line">            // Pick all vertices as destination for the </span><br><span class="line">            // above picked source </span><br><span class="line">            for (j = 0; j &lt; V; j++) </span><br><span class="line">            &#123; </span><br><span class="line">                // If vertex k is on the shortest path from </span><br><span class="line">                // i to j, then update the value of dist[i][j] </span><br><span class="line">                if (dist[i][k] + dist[k][j] &lt; dist[i][j]) &#123;</span><br><span class="line">                    // here we can add an array to record the path</span><br><span class="line">                    // path[j] = k;</span><br><span class="line">                    dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    // Print the shortest distance matrix </span><br><span class="line">    printSolution(dist); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.geeksforgeeks.org/bellman-ford-algorithm-dp-23/" target="_blank" rel="noopener">Bellman–Ford Algorithm</a><br><strong>Single Source Shortest Path</strong><br>1) This step initializes distances from source to all vertices as infinite and distance to source itself as 0. Create an array dist[] of size |V| with all values as infinite except dist[src] where src is source vertex.<br>2) This step calculates shortest distances. Do following |V|-1 times where |V| is the number of vertices in given graph.<br>…..a) Do following for each edge u-v<br>………………If dist[v] &gt; dist[u] + weight of edge uv, then update dist[v]<br>………………….dist[v] = dist[u] + weight of edge uv<br>3) This step reports if there is a negative weight cycle in graph. Do following for each edge u-v<br>……If dist[v] &gt; dist[u] + weight of edge uv, then “Graph contains negative weight cycle”<br>The idea of step 3 is, step 2 guarantees shortest distances if graph doesn’t contain negative weight cycle. If we iterate through all edges one more time and get a shorter path for any vertex, then there is a negative weight cycle<br>How does this work? Like other Dynamic Programming Problems, the algorithm calculate shortest paths in bottom-up manner. It first calculates the shortest distances which have at-most one edge in the path. Then, it calculates shortest paths with at-most 2 edges, and so on. After the i-th iteration of outer loop, the shortest paths with at most i edges are calculated. There can be maximum |V| – 1 edges in any simple path, that is why the outer loop runs |v| – 1 times. The idea is, assuming that there is no negative weight cycle, if we have calculated shortest paths with at most i edges, then an iteration over all edges guarantees to give shortest path with at-most (i+1) edges (Proof is simple, you can refer <a href="http://courses.csail.mit.edu/6.006/spring11/lectures/lec15.pdf" target="_blank" rel="noopener">this</a> or <a href="https://www.youtube.com/watch?v=Ttezuzs39nk" target="_blank" rel="noopener">MIT Video Lecture</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// The main function that finds shortest distances from src to </span><br><span class="line">// all other vertices using Bellman-Ford algorithm.  The function </span><br><span class="line">// also detects negative weight cycle </span><br><span class="line">void BellmanFord(struct Graph* graph, int src) </span><br><span class="line">&#123; </span><br><span class="line">    int V = graph-&gt;V; </span><br><span class="line">    int E = graph-&gt;E; </span><br><span class="line">    int dist[V]; </span><br><span class="line">  </span><br><span class="line">    // Step 1: Initialize distances from src to all other vertices </span><br><span class="line">    // as INFINITE </span><br><span class="line">    for (int i = 0; i &lt; V; i++) </span><br><span class="line">        dist[i] = INT_MAX; </span><br><span class="line">    dist[src] = 0; </span><br><span class="line">  </span><br><span class="line">    // Step 2: Relax all edges |V| - 1 times. A simple shortest </span><br><span class="line">    // path from src to any other vertex can have at-most |V| - 1 </span><br><span class="line">    // edges </span><br><span class="line">    for (int i = 1; i &lt;= V - 1; i++) &#123; </span><br><span class="line">        for (int j = 0; j &lt; E; j++) &#123; </span><br><span class="line">            int u = graph-&gt;edge[j].src; </span><br><span class="line">            int v = graph-&gt;edge[j].dest; </span><br><span class="line">            int weight = graph-&gt;edge[j].weight; </span><br><span class="line">            if (dist[u] != INT_MAX &amp;&amp; dist[u] + weight &lt; dist[v]) &#123;</span><br><span class="line">                // here we can add an array to record the path</span><br><span class="line">                // path[v] = u;</span><br><span class="line">                dist[v] = dist[u] + weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    // Step 3: check for negative-weight cycles.  The above step </span><br><span class="line">    // guarantees shortest distances if graph doesn&apos;t contain </span><br><span class="line">    // negative weight cycle.  If we get a shorter path, then there </span><br><span class="line">    // is a cycle. </span><br><span class="line">    for (int i = 0; i &lt; E; i++) &#123; </span><br><span class="line">        int u = graph-&gt;edge[i].src; </span><br><span class="line">        int v = graph-&gt;edge[i].dest; </span><br><span class="line">        int weight = graph-&gt;edge[i].weight; </span><br><span class="line">        if (dist[u] != INT_MAX &amp;&amp; dist[u] + weight &lt; dist[v]) &#123; </span><br><span class="line">            printf(&quot;Graph contains negative weight cycle&quot;); </span><br><span class="line">            return; // If negative cycle is detected, simply return </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    printArr(dist, V); </span><br><span class="line">  </span><br><span class="line">    return; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/" target="_blank" rel="noopener">Dijkstra’s shortest path algorithm</a></p></li></ul><h1 id="Detect-Cycle"><a href="#Detect-Cycle" class="headerlink" title="Detect Cycle"></a>Detect Cycle</h1><ul><li><p><a href="https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/" target="_blank" rel="noopener">Kahn’s algorithm</a><br>Steps involved in finding the topological ordering of a DAG(Directed Acyclic Graph):<br><em>Step-1:</em> Compute in-degree (number of incoming edges) for each of the vertex present in the DAG and initialize the count of visited nodes as 0.<br><em>Step-2:</em> Pick all the vertices with in-degree as 0 and add them into a queue (Enqueue operation)<br><em>Step-3:</em> Remove a vertex from the queue (Dequeue operation) and then.</p><ul><li>Increment count of visited nodes by 1.</li><li>Decrease in-degree by 1 for all its neighboring nodes.</li><li>If in-degree of a neighboring nodes is reduced to zero, then add it to the queue.</li></ul><p><em>Step 5:</em> Repeat Step 3 until the queue is empty.<br><em>Step 5:</em> If count of visited nodes is not equal to the number of nodes in the graph then the topological sort is not possible for the given graph. <em>There is a loop when the queue size not equal the vertices.</em></p></li><li><p>union–find data structure<br>A disjoint-set data structure is a data structure that keeps track of a set of elements partitioned into a number of disjoint (non-overlapping) subsets. A union-find algorithm is an algorithm that performs two useful operations on such a data structure:<br>Find: Determine which subset a particular element is in. This can be used for determining if two elements are in the same subset.<br>Union: Join two subsets into a single subset.</p><ul><li><p>naive way</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// A utility function to find the subset of an element i </span><br><span class="line">int find(int parent[], int i) </span><br><span class="line">&#123; </span><br><span class="line">    if (parent[i] == -1) </span><br><span class="line">        return i; </span><br><span class="line">    return find(parent, parent[i]); </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">// A utility function to do union of two subsets  </span><br><span class="line">void Union(int parent[], int x, int y) </span><br><span class="line">&#123; </span><br><span class="line">    int xset = find(parent, x); </span><br><span class="line">    int yset = find(parent, y); </span><br><span class="line">    if(xset!=yset)&#123; </span><br><span class="line">       parent[xset] = yset; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">// The main function to check whether a given graph contains  </span><br><span class="line">// cycle or not </span><br><span class="line">int isCycle( struct Graph* graph ) </span><br><span class="line">&#123; </span><br><span class="line">    // Allocate memory for creating V subsets </span><br><span class="line">    int *parent = (int*) malloc( graph-&gt;V * sizeof(int) ); </span><br><span class="line">  </span><br><span class="line">    // Initialize all subsets as single element sets </span><br><span class="line">    memset(parent, -1, sizeof(int) * graph-&gt;V); </span><br><span class="line">  </span><br><span class="line">    // Iterate through all edges of graph, find subset of both </span><br><span class="line">    // vertices of every edge, if both subsets are same, then  </span><br><span class="line">    // there is cycle in graph. </span><br><span class="line">    for(int i = 0; i &lt; graph-&gt;E; ++i) </span><br><span class="line">    &#123; </span><br><span class="line">        int x = find(parent, graph-&gt;edge[i].src); </span><br><span class="line">        int y = find(parent, graph-&gt;edge[i].dest); </span><br><span class="line">  </span><br><span class="line">        if (x == y) </span><br><span class="line">            return 1; </span><br><span class="line">  </span><br><span class="line">        Union(parent, x, y); </span><br><span class="line">    &#125; </span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>optimize with rank and path compression</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">struct subset </span><br><span class="line">&#123; </span><br><span class="line">    int parent; </span><br><span class="line">    int rank; </span><br><span class="line">&#125;; </span><br><span class="line">  </span><br><span class="line">// Creates a graph with V vertices and E edges </span><br><span class="line">struct Graph* createGraph(int V, int E) </span><br><span class="line">&#123; </span><br><span class="line">    struct Graph* graph = (struct Graph*) malloc( sizeof(struct Graph) ); </span><br><span class="line">    graph-&gt;V = V; </span><br><span class="line">    graph-&gt;E = E; </span><br><span class="line">  </span><br><span class="line">    graph-&gt;edge = (struct Edge*) malloc( graph-&gt;E * sizeof( struct Edge ) ); </span><br><span class="line">  </span><br><span class="line">    return graph; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">// A utility function to find set of an element i </span><br><span class="line">// (uses path compression technique) </span><br><span class="line">int find(struct subset subsets[], int i) </span><br><span class="line">&#123; </span><br><span class="line">    // find root and make root as parent of i (path compression) </span><br><span class="line">    if (subsets[i].parent != i) </span><br><span class="line">        subsets[i].parent = find(subsets, subsets[i].parent); </span><br><span class="line">  </span><br><span class="line">    return subsets[i].parent; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">// A function that does union of two sets of x and y </span><br><span class="line">// (uses union by rank) </span><br><span class="line">void Union(struct subset subsets[], int x, int y) </span><br><span class="line">&#123; </span><br><span class="line">    int xroot = find(subsets, x); </span><br><span class="line">    int yroot = find(subsets, y); </span><br><span class="line">  </span><br><span class="line">    // Attach smaller rank tree under root of high rank tree </span><br><span class="line">    // (Union by Rank) </span><br><span class="line">    if (subsets[xroot].rank &lt; subsets[yroot].rank) </span><br><span class="line">        subsets[xroot].parent = yroot; </span><br><span class="line">    else if (subsets[xroot].rank &gt; subsets[yroot].rank) </span><br><span class="line">        subsets[yroot].parent = xroot; </span><br><span class="line">  </span><br><span class="line">    // If ranks are same, then make one as root and increment </span><br><span class="line">    // its rank by one </span><br><span class="line">    else</span><br><span class="line">    &#123; </span><br><span class="line">        subsets[yroot].parent = xroot; </span><br><span class="line">        subsets[xroot].rank++; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/" target="_blank" rel="noopener">Geeks Algorithms</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DFS-and-BFS&quot;&gt;&lt;a href=&quot;#DFS-and-BFS&quot; class=&quot;headerlink&quot; title=&quot;DFS and BFS&quot;&gt;&lt;/a&gt;DFS and BFS&lt;/h1&gt;&lt;p&gt;DFS with recursive, while BFS with
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="algorithm" scheme="xvirt.ink/tags/algorithm/"/>
    
      <category term="graph" scheme="xvirt.ink/tags/graph/"/>
    
      <category term="shortest path" scheme="xvirt.ink/tags/shortest-path/"/>
    
  </entry>
  
  <entry>
    <title>Virtualization: aarch64 vs x86_64</title>
    <link href="xvirt.ink/2019/10/05/virtualization-aarch64-vs-x86_64/"/>
    <id>xvirt.ink/2019/10/05/virtualization-aarch64-vs-x86_64/</id>
    <published>2019-10-05T03:06:13.000Z</published>
    <updated>2020-11-22T12:24:23.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Virtualization-Generations"><a href="#Virtualization-Generations" class="headerlink" title="Virtualization Generations"></a>Virtualization Generations</h1><p>Full-virtualization -&gt; Para-virtualization -&gt; Hardware-assisted virtualization -&gt; Hardware-offload virtualization -&gt; ?</p><h1 id="Types-of-virtualization"><a href="#Types-of-virtualization" class="headerlink" title="Types of virtualization"></a>Types of virtualization</h1><p>To understand virtualization, hpervisor should be addressed firtst. Hypervisor enables communication between hardware and a virtual machine so that the virtualizaion accomplished with this abstraction layer(hypervisor). While there is another word virtual machine monitor(VMM), those two terms are typically treated as synonyms. But there is a slightly distinction, a virtual machine monitor is a software that mnages CPU, memory, I/O data transfer, interrupt, and the instruction set on a given virtualized environment, a hypervisor may refer to an operating system(OS) with the VMM.</p><p>Typically, a hypervisor can be divided into two Type 1 and Type 2 hypervisor based on the different level of implementation. Type 1 is sitting on hardware and the communication between hardware and virtual machine is direct, somtime called ‘bare metal hypervisor’. Type 2 hypervisor is on the operating system to manage virtual machine easily with the support of hardware configuration from operating system.</p><table><thead><tr><th style="text-align:left">Types</th><th style="text-align:left">Level of Implementation</th><th style="text-align:left">Typical Hypervisor</th></tr></thead><tbody><tr><td style="text-align:left">Type 1</td><td style="text-align:left">bare metal</td><td style="text-align:left">ESXi, XEN, Hyper-V</td></tr><tr><td style="text-align:left">Type 2</td><td style="text-align:left">with OS</td><td style="text-align:left">Virtual Box, KVM</td></tr></tbody></table><p>Virtualization also divided into full virtualizaton, para-virtualization and hardware-assited virtualization(direct access to resources without binary translation or emulation) from the view of GuestOS.</p><h1 id="Virtualization-overhead-and-micro-benchmark"><a href="#Virtualization-overhead-and-micro-benchmark" class="headerlink" title="Virtualization overhead and micro-benchmark"></a>Virtualization overhead and micro-benchmark</h1><p>The hypervisor introduces overheads in emulating inter-processor interrupts (IPIs), TLB invalidation(TLB flush IPI), and transitions to/from idle modes, among others. Semantic gap between the guest OS and hypervisor also causes double scheduling, where the guest and host-level CPU schedulers make independent, but inefficient, scheduling decisions.</p><table><thead><tr><th style="text-align:left">Name</th><th style="text-align:left">Descripton</th><th style="text-align:left">Measure method</th><th style="text-align:left">Measure Tool</th></tr></thead><tbody><tr><td style="text-align:left">Hypercall</td><td style="text-align:left">Transition freom VM to hypervisor and return to VM without doing any work in the hypervisor.</td><td style="text-align:left">Measures bidirectional base trasition cost of hypervisor operatons.</td><td style="text-align:left">NA</td></tr><tr><td style="text-align:left">Interrupt Controller Trap</td><td style="text-align:left">Trap from VM to emulated interrupt controller then return to VM.</td><td style="text-align:left">Measures a frequent operation for many device drivers and baseline for accessing I/O devices emulated in the hypervisor.</td><td style="text-align:left">NA</td></tr><tr><td style="text-align:left">Virtual IPI</td><td style="text-align:left">Issure a virtual IPI freom a vCPU to another vCPU running on a different pCPU, both pCPUs executing VM code.</td><td style="text-align:left">Measures time between sending the virtual IPI until the receiveing vCPU handles it, a frequent operation in multi-core OSes that affects many workloads.</td><td style="text-align:left">NA</td></tr><tr><td style="text-align:left">Virtual IRQ Completion</td><td style="text-align:left">VM acknowledging and completing a virtual interrupt.</td><td style="text-align:left">Measures a frequent operation taht happerns for every injected virtual interrupt.</td><td style="text-align:left">NA</td></tr><tr><td style="text-align:left">VM Switch</td><td style="text-align:left">Switching freom one VM to another on the same physical core.</td><td style="text-align:left">Measures a central cost when over-subscribing physical CPUs.</td><td style="text-align:left">NA</td></tr><tr><td style="text-align:left">I/O Latency In</td><td style="text-align:left">Measures latency between a driver in the VM signaling the virtual I/O device in the hypervisor and the virtual I/O device receiving the signal.</td><td style="text-align:left">For KVM , this involves trapping to the host kernel. For xen, this involves trapping to xen then raising a virtual interrupt to Dom0</td><td style="text-align:left">NA</td></tr><tr><td style="text-align:left">I/O Latentcy Out</td><td style="text-align:left">Measures latency between the virtual I/O device in the hypervisor signaling the VM and the VM receiving the corresponding virtual interrupt.</td><td style="text-align:left">For KVM , this involves signaling the vCPU thread and injecting a virtual interrupt for the virtio device. For XEN, this involves trapping to Xen then raising a virtual interrupt to DomU.</td><td style="text-align:left">NA</td></tr></tbody></table><p>All measures unit in cycles by call tsc(Time Stamp Counter).</p><h1 id="Hardware-assisted-virtualization-technology"><a href="#Hardware-assisted-virtualization-technology" class="headerlink" title="Hardware-assisted virtualization technology"></a>Hardware-assisted virtualization technology</h1><ul><li><p>CPU Virtualization</p><ul><li>VHE and VTx<ul><li>aarch64, Virtualization Host Extensions(VHE), vmid/asid<br><img src="arch64-vhe.png" alt="Virtualization Host Extensions(VHE)"></li><li>x86_64 VTx: vmcs, root and non-root mode, vpid.<br><img src="x86_64-vt-x_cpu-virtualization.png" alt="x86_64 CPU Virtualization with VT-x"></li></ul></li><li>Privilege levels<ul><li>aarch64 excpetion level, EL 0(userspace applications), EL 1(guest kernel), EL 2(host kernel/hypervisor), EL 3(secure)</li><li>x86_64 ring, ring 0(hypervisor under root mode, guest under non-root mode), ring 1, ring 2, ring3(applications)<br><img src="x86_64-ring.png" alt="x86_64 rings"></li></ul></li></ul></li><li><p>Memory Virtualization</p><ul><li>GVA to PHA translation<ul><li>aarch64, stage 2 translation, GVA –mmu-&gt; IPA/GPA –mmu-&gt; HPA<br><img src="arch64-stage-2.png" alt="Stage 2 translation"></li><li>x86_64, extended page tables(EPT)<br><img src="x86_64-ept.png" alt="EPT"></li></ul></li></ul></li><li>IO &amp; Timers &amp; Interrupt  Virtualization</li></ul><table><thead><tr><th style="text-align:left">types</th><th style="text-align:left">x86_64</th><th style="text-align:left">aarch64</th></tr></thead><tbody><tr><td style="text-align:left">IO</td><td style="text-align:left">IOMMU(vIOMMU)</td><td style="text-align:left">SMMU(vSMMU)</td></tr><tr><td style="text-align:left">Timers</td><td style="text-align:left">pmtimer</td><td style="text-align:left">the generic timers</td></tr><tr><td style="text-align:left">Virtual interrupt</td><td style="text-align:left">APIC(vAPIC)</td><td style="text-align:left">GIC(vGIC)</td></tr></tbody></table><pre><code>Timers Notes:    Real time is expressed in nanoseconds passed since machine boot and is maintained to the accuracy of the processor’s cycle counter and can be frequency-locked to an external time source (for example, via NTP).    A domain’s virtual time only advances while it is executing: this is typically used by the guest OS scheduler to ensure correct sharing of its timeslice between application processes.    Finally, wall-clock time is specified as an offset to be added to the current real time. This allows the wall-clock time to be adjusted without affecting the forward progress of real time.</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://developer.arm.com/architectures/learn-the-architecture/armv8-a-virtualization" target="_blank" rel="noopener">Learn the architecture of armv8 virtualization</a></li><li><a href="https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html" target="_blank" rel="noopener">Intel® 64 and IA-32 Architectures Developer’s Manual</a></li><li>Optimizing the Design and Implementation of the Linux ARM Hypervisor, 2017 USENIX Annual Technical Conference</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Virtualization-Generations&quot;&gt;&lt;a href=&quot;#Virtualization-Generations&quot; class=&quot;headerlink&quot; title=&quot;Virtualization Generations&quot;&gt;&lt;/a&gt;Virtuali
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="virtualization" scheme="xvirt.ink/tags/virtualization/"/>
    
      <category term="aarch64" scheme="xvirt.ink/tags/aarch64/"/>
    
      <category term="x86_64" scheme="xvirt.ink/tags/x86-64/"/>
    
  </entry>
  
  <entry>
    <title>Design Patterns and UML</title>
    <link href="xvirt.ink/2019/10/02/design-patterns/"/>
    <id>xvirt.ink/2019/10/02/design-patterns/</id>
    <published>2019-10-02T06:43:13.000Z</published>
    <updated>2020-02-09T04:13:34.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Princinples"><a href="#Princinples" class="headerlink" title="Princinples"></a>Princinples</h1><ul><li><p>The Open Closed Princinple(OCP)<br>A module should be open for extension but closed for modification. In other words, modules can be extened, without requiring them to be modified in existing source codes. This means that, with a llitle forethought, wd can add new features to existing code, without changing the existing code and by only adding new code. Symptoms of Rotting Design, rigidity, fragility, immobility, vicosity.</p></li><li><p>The Liskov Substitution Princile(LSP)<br>Subclasses should be substitutable for their base classes. It alse derives freom the concept of Design by Contract(DBC), e.g. circle/ellipse dilemma.</p></li><li><p>The Dependency Inversion Principle(DIP)<br>Denpand upon abstractions, do not depend upon concretions.</p></li><li><p>The Interface Segregation Principle(ISP)<br>Many client specific interfaces are better than on general purpose interface.</p></li><li><p>Principles of Package architecture<br>– The release reuse equivalency principle(REP), the granule of reuse is the granule of release.<br>– The common closure principle(CCP), classes that change together, belong together.<br>– The common reuse principle(CRP), classed that are not reused together should not be grouped together.<br>– The acyclic dependencies principle(ADP), the dependencies between packages must not form cycles.<br>– The stable dependencies principle(SDP), depend in the direction of stability.</p></li></ul><h1 id="Patterns-of-Object-Oriented-Architecture"><a href="#Patterns-of-Object-Oriented-Architecture" class="headerlink" title="Patterns of Object Oriented Architecture"></a>Patterns of Object Oriented Architecture</h1><ul><li><p>Creational Patterns</p><ul><li>Abstract Factory, Factory Method<br>The DIP strongly recommends that modules not depend upon concrete classed. However, in order to create an instane fo a class, you must depend upon the concrete class. Abstract factory is a pattern that allows that dependency upon the concreate class to exist in on, and only one, place.</li><li>Template(extend), Builder(implement)</li><li>Singleton<br>Avoid creating an object everytime.</li><li>Decorator, Prototype</li></ul></li><li><p>Structural Patterns</p><ul><li>Adapter, Facade<br>When inserting an abstract interface is infeasible because the server is third party software, or is so heavily depended upon that it can not easily be changed, and ADAPTER can be used to bind the abstract interface to the server.<br>The adapter is an object that implements the abstract interface to delegate to the server. Every methon of the adpater simply translates and then delegates.</li><li>Bridge<br>One of the problems with implementing an abstract class with inheritance is that the derived class is so tightly coupled to the base classes. This can lead to problems when other clients want to use the derived class functions without draging along the bagae of the base hiearchy, decouple an abstraction from its implementation.<br>Adapter makes things work after they’re designed, bridge makes them work before they are.</li><li>Proxy, Abstract Server<br>When a client depends directly on a server, the DIP is violated. Changes to the server will propogate to the client, and the client will be unable to easily use similar servers. This can be recified by inserting an interface between the client and the server, to produce a unified interface for a number of underlying and unrelated objects.</li><li>Flyweight, Composite, Decorator</li></ul></li><li><p>Behavioral Patterns</p><ul><li>Observer<br>It often occurs that one element of a design needs to take some form of action when another element in the design dicovers that an event has occurred. However, we frequently donot want the detector to know about the actor.</li><li>Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Mememnto</li><li>State, Strategy, Visitor</li><li>Template Method</li></ul></li></ul><h1 id="UML-Unified-Modeling-Language"><a href="#UML-Unified-Modeling-Language" class="headerlink" title="UML(Unified Modeling Language)"></a>UML(Unified Modeling Language)</h1><ul><li><p>UML Diagrams<br>– Behavioral UML Diagram: Sequence Diagram: Activity diagram, Use Case diagram, Interaction Overview Diagram, Timing Diagram, State Machine Diagram, Communication Diagram, Sequence Diagram<br>– Structural UML Diagram: Class Diagram, Object Diagram, Component Diagram, Composite Structure Diagram, Deployment Diagram, Deployment Diagram, Profile Diagram</p></li><li><p>UML Notations<br>– Relationships: Dependency Notation, Association Notation, Generalization Notation, Extensibility Notation<br>– Relationships between classes<br><img src="07-relationships-between-classes.png" alt="Relationships between classes"><br>– Class Diagram Example: Order System<br><img src="17-class-diagram-example-order-system.png" alt="Class Diagram Example: Order System"><br>– Class Diagram Example: GUI<br><img src="18-uml-class-diagram-example-gui.png" alt="Class Diagram Example: GUI"></p></li></ul><h1 id="Referencs"><a href="#Referencs" class="headerlink" title="Referencs"></a>Referencs</h1><ul><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/" target="_blank" rel="noopener">UML Class Diagram Tutorial</a></li><li><a href="https://tallyfy.com/uml-diagram/#composite-structure-diagram" target="_blank" rel="noopener">All You Need to Know About UML Diagrams: Types and 5+ Examples</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Princinples&quot;&gt;&lt;a href=&quot;#Princinples&quot; class=&quot;headerlink&quot; title=&quot;Princinples&quot;&gt;&lt;/a&gt;Princinples&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Open Closed Princinpl
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="design patterns" scheme="xvirt.ink/tags/design-patterns/"/>
    
      <category term="uml" scheme="xvirt.ink/tags/uml/"/>
    
  </entry>
  
  <entry>
    <title>Function Calling Conventions</title>
    <link href="xvirt.ink/2018/12/26/function-calling-conventions/"/>
    <id>xvirt.ink/2018/12/26/function-calling-conventions/</id>
    <published>2018-12-26T12:56:13.000Z</published>
    <updated>2018-12-26T14:11:14.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><ul><li>Passing arguments: “passing arguments” is a way of saying that the calling function is writing data in the place where the called function will look for them. Arguments are passed before the call instruction is executed.</li><li><p>Right-to-Left and Left-to-Right: describe the manner that arguments are passed to the subroutine, in terms of the High-level code. For instance, the following C function call:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MyFunction1(a, b);</span><br><span class="line">//will generate the following code if passed Left-to-Right:</span><br><span class="line">push a</span><br><span class="line">push b</span><br><span class="line">call _MyFunction</span><br><span class="line">//and will generate the following code if passed Right-to-Left:</span><br><span class="line">push b</span><br><span class="line">push a</span><br><span class="line">call _MyFunction</span><br></pre></td></tr></table></figure></li><li><p>Return value: Some functions return a value, and that value must be received reliably by the function’s caller. The called function places its return value in a place where the calling function can get it when execution returns. The called function stores the return value before executing the ret instruction.</p></li><li>Cleaning the stack: when arguments are pushed onto the stack, eventually they must be popped back off again. Whichever function, the caller or the callee, is responsible for cleaning the stack must reset the stack pointer to eliminate the passed arguments.</li><li>Calling function (the caller): The “parent” function that calls the subroutine. Execution resumes in the calling function directly after the subroutine call, unless the program terminates inside the subroutine.</li><li>Called function (the callee): The “child” function that gets called by the “parent”.</li><li>Name Decoration: When C code is translated to assembly code, the compiler will often “decorate” the function name by adding extra information that the linker will use to find and link to the correct functions. For most calling conventions, the decoration is very simple (often only an extra symbol or two to denote the calling convention), but in some extreme cases (notably C++ “thiscall” convention), the names are “mangled” severely.</li><li>Entry sequence (the function prologue): a few instructions at the beginning of a function, which prepare the stack and registers for use within the function.</li><li>Exit sequence (the function epilogue): a few instructions at the end of a function, which restore the stack and registers to the state expected by the caller, and return to the caller. Some calling conventions clean the stack in the exit sequence.</li><li>Call sequence: a few instructions in the middle of a function (the caller) which pass the arguments and call the called function. After the called function has returned, some calling conventions have one more instruction in the call sequence to clean the stack.</li></ul><h3 id="Stack-Frame"><a href="#Stack-Frame" class="headerlink" title="Stack Frame"></a>Stack Frame</h3><ul><li><p>Example Code, sum_till_max.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define MAX (1UL &lt;&lt; 20)</span><br><span class="line"></span><br><span class="line">typedef unsigned long long u64;</span><br><span class="line">typedef unsigned int u32;</span><br><span class="line"></span><br><span class="line">u32 max_add_end = MAX;</span><br><span class="line"></span><br><span class="line">u64 sum_till_max(u32 n)</span><br><span class="line">&#123;</span><br><span class="line">  u64 sum;</span><br><span class="line">  n++;</span><br><span class="line">  sum = n;</span><br><span class="line"></span><br><span class="line">  if (n &lt; max_add_end)</span><br><span class="line">    sum += sum_till_max(n);</span><br><span class="line"></span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  u64 sum = 0;</span><br><span class="line"></span><br><span class="line">  if ((argc == 2) &amp;&amp; isdigit(*argv[1]))</span><br><span class="line">    max_add_end = strtoul(argv[1], NULL, 0);</span><br><span class="line"></span><br><span class="line">  if (max_add_end &gt; MAX || max_add_end == 0) &#123;</span><br><span class="line">    fprintf(stderr, &quot;Invalid number is specified\n&quot;);</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sum = sum_till_max(0);</span><br><span class="line">  printf(&quot;sum(0...%u) = %llu\n&quot;, max_add_end, sum);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Content Assemble Code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disassemble main </span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x000000000040069b &lt;+0&gt;:push   %rbp</span><br><span class="line">   0x000000000040069c &lt;+1&gt;:mov    %rsp,%rbp</span><br><span class="line">   0x000000000040069f &lt;+4&gt;:sub    $0x20,%rsp</span><br><span class="line">...</span><br><span class="line">   0x0000000000400744 &lt;+169&gt;:jmp    0x400774 &lt;main+217&gt;</span><br><span class="line">   0x0000000000400746 &lt;+171&gt;:mov    $0x0,%edi ----------------------------------------------------#1</span><br><span class="line">   0x000000000040074b &lt;+176&gt;:callq  0x400666 &lt;sum_till_max&gt; --------------------------------------#2</span><br><span class="line">   0x0000000000400750 &lt;+181&gt;:mov    %rax,-0x8(%rbp)</span><br><span class="line">   0x0000000000400754 &lt;+185&gt;:mov    0x2008f6(%rip),%eax        # 0x601050 &lt;max_add_end&gt;</span><br><span class="line">...</span><br><span class="line">(gdb) disassemble sum_till_max </span><br><span class="line">Dump of assembler code for function sum_till_max:</span><br><span class="line">   0x0000000000400666 &lt;+0&gt;: push   %rbp ---------------------------------------------------------#3</span><br><span class="line">   0x0000000000400667 &lt;+1&gt;: mov    %rsp,%rbp ----------------------------------------------------#4</span><br><span class="line">   0x000000000040066a &lt;+4&gt;: sub    $0x20,%rsp ---------------------------------------------------#5</span><br><span class="line">   0x000000000040066e &lt;+8&gt;: mov    %edi,-0x14(%rbp)</span><br><span class="line">   0x0000000000400671 &lt;+11&gt;:addl   $0x1,-0x14(%rbp) ---------------------------------------------#6</span><br><span class="line">   0x0000000000400675 &lt;+15&gt;:mov    -0x14(%rbp),%eax</span><br><span class="line">   0x0000000000400678 &lt;+18&gt;:mov    %rax,-0x8(%rbp)</span><br><span class="line">   0x000000000040067c &lt;+22&gt;:mov    0x2009ce(%rip),%eax        # 0x601050 &lt;max_add_end&gt;</span><br><span class="line">   0x0000000000400682 &lt;+28&gt;:cmp    %eax,-0x14(%rbp)</span><br><span class="line">   0x0000000000400685 &lt;+31&gt;:jae    0x400695 &lt;sum_till_max+47&gt;</span><br><span class="line">   0x0000000000400687 &lt;+33&gt;:mov    -0x14(%rbp),%eax</span><br><span class="line">   0x000000000040068a &lt;+36&gt;:mov    %eax,%edi</span><br><span class="line">   0x000000000040068c &lt;+38&gt;:callq  0x400666 &lt;sum_till_max&gt;</span><br><span class="line">   0x0000000000400691 &lt;+43&gt;:add    %rax,-0x8(%rbp)</span><br><span class="line">   0x0000000000400695 &lt;+47&gt;:mov    -0x8(%rbp),%rax</span><br><span class="line">   0x0000000000400699 &lt;+51&gt;:leaveq --------------------------------------------------------------#7</span><br><span class="line">   0x000000000040069a &lt;+52&gt;:retq ----------------------------------------------------------------#8</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://manybutfinite.com/post/journey-to-the-stack/" target="_blank" rel="noopener">journey to the stack</a></li><li><a href="https://en.wikibooks.org/wiki/X86_Disassembly/Calling_Conventions" target="_blank" rel="noopener">x86 Disassembly/Calling Conventions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Terminology&quot;&gt;&lt;a href=&quot;#Terminology&quot; class=&quot;headerlink&quot; title=&quot;Terminology&quot;&gt;&lt;/a&gt;Terminology&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Passing arguments: “passing 
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="calling conventions" scheme="xvirt.ink/tags/calling-conventions/"/>
    
  </entry>
  
  <entry>
    <title>KVM virtulization with Qemu</title>
    <link href="xvirt.ink/2018/12/16/qemu-kvm/"/>
    <id>xvirt.ink/2018/12/16/qemu-kvm/</id>
    <published>2018-12-16T07:34:14.000Z</published>
    <updated>2018-12-16T10:31:49.140Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Qemu-Threads"><a href="#Qemu-Threads" class="headerlink" title="Qemu Threads"></a>Qemu Threads</h3><ul><li>main thread: main_loop()/vl.c, main_loop_wait()/main-loop.c<ul><li>Waits for file descriptors to become readable or writable. File descriptors play a critical role because files, sockets, pipes, and various other resources are all file descriptors. File descriptors can be added using qemu_set_fd_handler().</li><li>Runs expired timers. Timers can be added using qemu_mod_timer().</li><li>Runs bottom-halves (BHs), which are like timers that expire immediately. BHs are used to avoid reentrancy and overflowing the call stack. BHs can be added using qemu_bh_schedule().</li></ul></li><li>io thread: iothread_run()</li><li>vcpu thread: qemu_kvm_cpu_thread_fn()</li></ul><h3 id="KVM-and-Qemu-Interaction-Diagram"><a href="#KVM-and-Qemu-Interaction-Diagram" class="headerlink" title="KVM and Qemu Interaction Diagram"></a>KVM and Qemu Interaction Diagram</h3><ul><li>KVM and Qemu Interaction Diagram<br><img src="kvm-qemu-interaction.png" alt="KVM and Qemu interaction diagram"></li></ul><h3 id="GuestOS-KVM-and-Qemu-Iteraction-Diagram-virtio-net"><a href="#GuestOS-KVM-and-Qemu-Iteraction-Diagram-virtio-net" class="headerlink" title="GuestOS, KVM and Qemu Iteraction Diagram: virtio-net"></a>GuestOS, KVM and Qemu Iteraction Diagram: virtio-net</h3><ul><li>GuestOS, KVM and Qemu Iteraction Diagram: virtio-net<br><img src="virtio-net.png" alt="GuestOS, KVM and Qemu Iteraction Diagram: virtio-net"></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://blog.vmsplice.net/2011/03/qemu-internals-overall-architecture-and.html" target="_blank" rel="noopener">QEMU Internals: Overall architecture and threading model</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Qemu-Threads&quot;&gt;&lt;a href=&quot;#Qemu-Threads&quot; class=&quot;headerlink&quot; title=&quot;Qemu Threads&quot;&gt;&lt;/a&gt;Qemu Threads&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;main thread: main_loop()
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="virtualization" scheme="xvirt.ink/tags/virtualization/"/>
    
      <category term="qemu" scheme="xvirt.ink/tags/qemu/"/>
    
      <category term="kvm" scheme="xvirt.ink/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>Memory Layout of C Programs</title>
    <link href="xvirt.ink/2018/11/16/memory-layout/"/>
    <id>xvirt.ink/2018/11/16/memory-layout/</id>
    <published>2018-11-16T13:31:44.000Z</published>
    <updated>2018-12-27T14:44:23.955Z</updated>
    
    <content type="html"><![CDATA[<p>A typical memory representation of C program consists of following sections.</p><ol><li>Text segment</li><li>Initialized data segment</li><li>Uninitialized data segment</li><li>Stack</li><li>Heap</li></ol><p>A typical memory layout of a running process<br><img src="memory-layout.png" alt="A typical memory layout of a running process"></p><h3 id="Text-Segment"><a href="#Text-Segment" class="headerlink" title="Text Segment"></a>Text Segment</h3><p>A text segment , also known as a code segment or simply as text, is one of the sections of a program in an object file or in memory, which contains executable instructions.</p><p>As a memory region, a text segment may be placed below the heap or stack in order to prevent heaps and stack overflows from overwriting it.</p><p>Usually, the text segment is sharable so that only a single copy needs to be in memory for frequently executed programs, such as text editors, the C compiler, the shells, and so on. Also, the text segment is often read-only, to prevent a program from accidentally modifying its instructions.</p><h3 id="Initialized-Data-Segment"><a href="#Initialized-Data-Segment" class="headerlink" title="Initialized Data Segment"></a>Initialized Data Segment</h3><p>Initialized data segment, usually called simply the Data Segment. A data segment is a portion of virtual address space of a program, which contains the global variables and static variables that are initialized by the programmer.</p><p>Note that, data segment is not read-only, since the values of the variables can be altered at run time.</p><p>This segment can be further classified into initialized read-only area and initialized read-write area.</p><p>For instance the global string defined by char s[] = “hello world” in C and a C statement like int debug=1 outside the main (i.e. global) would be stored in initialized read-write area. And a global C statement like const char* string = “hello world” makes the string literal “hello world” to be stored in initialized read-only area and the character pointer variable string in initialized read-write area.</p><p>Ex: static int i = 10 will be stored in data segment and global int i = 10 will also be stored in data segment.</p><h3 id="Uninitialized-Data-Segment"><a href="#Uninitialized-Data-Segment" class="headerlink" title="Uninitialized Data Segment"></a>Uninitialized Data Segment</h3><p>Uninitialized data segment, often called the “bss” segment, named after an ancient assembler operator that stood for “block started by symbol.” Data in this segment is initialized by the kernel to arithmetic 0 before the program starts executing</p><p>uninitialized data starts at the end of the data segment and contains all global variables and static variables that are initialized to zero or do not have explicit initialization in source code.</p><p>For instance a variable declared static int i; would be contained in the BSS segment.<br>For instance a global variable declared int j; would be contained in the BSS segment.</p><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>The stack area traditionally adjoined the heap area and grew the opposite direction; when the stack pointer met the heap pointer, free memory was exhausted. (With modern large address spaces and virtual memory techniques they may be placed almost anywhere, but they still typically grow opposite directions.)</p><p>The stack area contains the program stack, a LIFO structure, typically located in the higher parts of memory. On the standard PC x86 computer architecture it grows toward address zero; on some other architectures it grows the opposite direction. A “stack pointer” register tracks the top of the stack; it is adjusted each time a value is “pushed” onto the stack. The set of values pushed for one function call is termed a “stack frame”; A stack frame consists at minimum of a return address.</p><p>Stack, where automatic variables are stored, along with information that is saved each time a function is called. Each time a function is called, the address of where to return to and certain information about the caller’s environment, such as some of the machine registers, are saved on the stack. The newly called function then allocates room on the stack for its automatic and temporary variables. This is how recursive functions in C can work. Each time a recursive function calls itself, a new stack frame is used, so one set of variables doesn’t interfere with the variables from another instance of the function.</p><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><p>Heap is the segment where dynamic memory allocation usually takes place.</p><p>The heap area begins at the end of the BSS segment and grows to larger addresses from there.The Heap area is managed by malloc, realloc, and free, which may use the brk and sbrk system calls to adjust its size (note that the use of brk/sbrk and a single “heap area” is not required to fulfill the contract of malloc/realloc/free; they may also be implemented using mmap to reserve potentially non-contiguous regions of virtual memory into the process’ virtual address space). The Heap area is shared by all shared libraries and dynamically loaded modules in a process.</p><p>The <a href="https://linux.die.net/man/1/size" target="_blank" rel="noopener">size(1)</a> command reports the sizes (in bytes) of the text, data, and bss segments.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><ul><li><p>Check the following simple C program</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-42-139:~/coding$ gcc -O0 ./memory-layout.c -o memory-layout</span><br><span class="line">ubuntu@ip-172-31-42-139:~/coding$ size memory-layout</span><br><span class="line">   text   data    bss    dec    hexfilename</span><br><span class="line">   1099    544      8   1651    673memory-layout</span><br></pre></td></tr></table></figure></li><li><p>Let us add one global variable in program, now check the size of bss (highlighted in red color)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int global; /* Uninitialized variable stored in bss*/</span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Let us add one static variable which is also stored in bss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int global; /* Uninitialized variable stored in bss*/</span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    static int i; /* Uninitialized static variable stored in bss */</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Let us initialize the static variable which will then be stored in Data Segment (DS)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int global; /* Uninitialized variable stored in bss*/</span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    static int i = 100; /* Initialized static variable stored in DS*/</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Let us initialize the global variable which will then be stored in Data Segment (DS)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int global = 10; /* initialized global variable stored in DS*/</span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    static int i = 100; /* Initialized static variable stored in DS*/</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Heap-Details"><a href="#Heap-Details" class="headerlink" title="Heap Details"></a>Heap Details</h3><p>Heap Zoom In<br><img src="heap-zoom-in.png" alt="Heap Zoom In"><br>When malloc size is less than M_MMAP_THRESHOLD, which could set by mallopt(), brk() will be used, otherwise mmap() will be used. With brk() the memory blocks are not immediately returned to system, the C library aggregates them until a sufficiently large, contiguous chunk can be freed at once.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://en.m.wikibooks.org/wiki/X86_Assembly/X86_Architecture" target="_blank" rel="noopener">x86 Architecture</a><br><a href="https://www.linuxjournal.com/article/6390" target="_blank" rel="noopener">Advanced Memory Allocation</a><br><a href="https://manybutfinite.com/post/anatomy-of-a-program-in-memory/" target="_blank" rel="noopener">Anatomy of a Program in Memory</a><br><a href="https://manybutfinite.com/post/how-the-kernel-manages-your-memory/" target="_blank" rel="noopener">How The Kernel Manages Your Memory</a><br><a href="https://manybutfinite.com/post/memory-translation-and-segmentation/" target="_blank" rel="noopener">Memory Translation and Segmentation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A typical memory representation of C program consists of following sections.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Text segment&lt;/li&gt;
&lt;li&gt;Initialized data segment&lt;
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="program" scheme="xvirt.ink/tags/program/"/>
    
      <category term="memory layout" scheme="xvirt.ink/tags/memory-layout/"/>
    
  </entry>
  
  <entry>
    <title>ATA, SATA, SCSI and SAS</title>
    <link href="xvirt.ink/2018/11/06/sas-sata/"/>
    <id>xvirt.ink/2018/11/06/sas-sata/</id>
    <published>2018-11-06T14:31:44.000Z</published>
    <updated>2018-11-16T12:46:31.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Abbreviations"><a href="#Abbreviations" class="headerlink" title="Abbreviations"></a>Abbreviations</h3><table><thead><tr><th style="text-align:left">Abbreviation</th><th style="text-align:left">Acronym for</th></tr></thead><tbody><tr><td style="text-align:left">ATA, IDE</td><td style="text-align:left">Advanced Technology Attachment, Integrated Drive Electronics</td></tr><tr><td style="text-align:left">SATA</td><td style="text-align:left">Serial ATA</td></tr><tr><td style="text-align:left">SCSI</td><td style="text-align:left">Small Computer System Interface</td></tr><tr><td style="text-align:left">SAS</td><td style="text-align:left">Serial Attached SCSI</td></tr></tbody></table><h3 id="Standard-Committes"><a href="#Standard-Committes" class="headerlink" title="Standard Committes"></a>Standard Committes</h3><ul><li><a href="http://www.incits.org/" target="_blank" rel="noopener">incits</a>:  InterNational Committee for Information Technology Standards<ul><li><a href="http://t10.org/" target="_blank" rel="noopener">t10</a>: Technical Committee T10, SCSI Storage Interfaces</li><li><a href="http://t13.org/" target="_blank" rel="noopener">t13</a>: Technical Committee T13, ATA Interfaces</li><li><a href="http://www.incits.org/committees/" target="_blank" rel="noopener">committees</a></li></ul></li></ul><h3 id="Industry-Alliances"><a href="#Industry-Alliances" class="headerlink" title="Industry Alliances"></a>Industry Alliances</h3><ul><li><a href="http://www.scsita.org/content/" target="_blank" rel="noopener">SCSI Trade Alliance</a></li></ul><h3 id="Roadmaps"><a href="#Roadmaps" class="headerlink" title="Roadmaps"></a>Roadmaps</h3><ul><li>SAS Roadmap<br><img src="SAS_roadmap.jpg" alt="SAS Roadmap"></li></ul><h3 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h3><ul><li><a href="https://www.webopedia.com/DidYouKnow/Computer_Science/sas_sata.asp" target="_blank" rel="noopener">SAS, SATA, SCSI and ATA</a></li><li>SAS vs SATA: reliability, error bit rate, MTBF, error recovery/detection, silent data corruption, RV compensation feedback mechanism <ul><li><a href="https://www.intel.com/content/www/us/en/support/articles/000005782/server-products.html" target="_blank" rel="noopener">Intel</a></li><li><a href="https://www.diffen.com/difference/SATA_vs_Serial_Attached_SCSI#SATA_and_SATA_Revisions" target="_blank" rel="noopener">Diffen</a></li><li><a href="http://www.enterprisestorageforum.com/storage-networking/sas-vs-sata.html" target="_blank" rel="noopener">EnterpriseStorageForum</a></li></ul></li><li><a href="https://www.computerworld.com/article/2574104/data-center/serial-vs--parallel-storage.html" target="_blank" rel="noopener">Serial vs Parallel</a>: signal skewing, crosstalk</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Abbreviations&quot;&gt;&lt;a href=&quot;#Abbreviations&quot; class=&quot;headerlink&quot; title=&quot;Abbreviations&quot;&gt;&lt;/a&gt;Abbreviations&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th styl
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="storage" scheme="xvirt.ink/tags/storage/"/>
    
      <category term="interface" scheme="xvirt.ink/tags/interface/"/>
    
  </entry>
  
  <entry>
    <title>Collection of Linux Weather Forcast</title>
    <link href="xvirt.ink/2018/10/03/linux-weather-forecast/"/>
    <id>xvirt.ink/2018/10/03/linux-weather-forecast/</id>
    <published>2018-10-03T14:25:59.000Z</published>
    <updated>2018-11-11T03:00:42.766Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.linux.com/news/category/linux-kernel" target="_blank" rel="noopener">Weather Forcast</a></p><h3 id="Short-term-Forcast"><a href="#Short-term-Forcast" class="headerlink" title="Short-term Forcast"></a>Short-term Forcast</h3><ul><li><a href="https://lwn.net/Articles/748879/" target="_blank" rel="noopener">Time-based packet transmission</a></li><li><a href="https://lwn.net/Articles/758353/" target="_blank" rel="noopener">CAKE queueing discipline</a>: offers significantly better networking performance, especially in home or small-business settings.</li><li><a href="https://lwn.net/Articles/758963/" target="_blank" rel="noopener">The block I/O latency controller</a>: allows an administrator to provide block (disk) I/O response-time guarantees to specific processes.</li></ul><h3 id="Kernel-4-18"><a href="#Kernel-4-18" class="headerlink" title="Kernel-4.18"></a>Kernel-4.18</h3><ul><li><a href="https://lwn.net/Articles/747551/" target="_blank" rel="noopener">bpfilter</a>: expected to be the base on which the next generation of kernel firewalling systems is built.</li><li><a href="https://lwn.net/Articles/754681/" target="_blank" rel="noopener">A reworked TCP zero-copy receive API</a></li><li><a href="https://lwn.net/Articles/750845/" target="_blank" rel="noopener">Accelerating networking with AF_XDP</a>: a larger effort to win back users of user-space networking stacks by providing better facilities in the kernel.</li><li><a href="https://lwn.net/Articles/760690/" target="_blank" rel="noopener">Statistics from the 4.18 development cycle</a></li><li><a href="https://www.linux.com/news/2018/9/linux-weather-forecast" target="_blank" rel="noopener">Linux Weather Forecast 2018.09</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.linux.com/news/category/linux-kernel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Weather Forcast&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Short-term-Forc
      
    
    </summary>
    
      <category term="quotes" scheme="xvirt.ink/categories/quotes/"/>
    
    
      <category term="kernel" scheme="xvirt.ink/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>Google Driver for Linux</title>
    <link href="xvirt.ink/2018/09/28/gcloud-share/"/>
    <id>xvirt.ink/2018/09/28/gcloud-share/</id>
    <published>2018-09-28T15:17:26.000Z</published>
    <updated>2018-10-02T12:18:59.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>To share directory between windows and linux enviroment with <a href="https://drive.google.com/drive/my-drive" target="_blank" rel="noopener">Google Driver</a>. The most important reason to choose google driver is  the compabiltiy of driver client span OS, such as Linux, Windows, macOS, iOS and Android.</p><h3 id="Top-12-Best-Google-Drive-Linux-Client-Software"><a href="#Top-12-Best-Google-Drive-Linux-Client-Software" class="headerlink" title="Top 12 Best Google Drive Linux Client Software"></a><a href="https://www.ubuntupit.com/top-12-best-google-drive-linux-client-software/" target="_blank" rel="noopener">Top 12 Best Google Drive Linux Client Software</a></h3><ul><li>GUI Tools: <a href="https://www.insynchq.com/" target="_blank" rel="noopener">Insync</a></li><li>Command Line Tools: <a href="http://yourcmc.ru/wiki/Grive2" target="_blank" rel="noopener">grive2</a>, <a href="https://github.com/astrada/google-drive-ocamlfuse" target="_blank" rel="noopener">google-drive-ocamlfuse</a></li></ul><h3 id="Grive2-Install-Steps"><a href="#Grive2-Install-Steps" class="headerlink" title="Grive2 Install Steps"></a>Grive2 Install Steps</h3><ul><li><p>For CentOS 7.4</p><ul><li># yum -y groupinstall “Development Tools”</li><li># yum -y install git cmake libgcrypt-devel yajl yajl-devel boost boost-devel curl curl-devel expat-devel cppunit-devel binutils-devel pkgconfig zlib-devel</li></ul></li><li><p>For Ubuntu 16.04</p><ul><li># sudo apt-get update; sudo apt-get upgrade; sudo apt-get install build-essential</li><li># sudo apt-get install git cmake build-essential libgcrypt11-dev libyajl-dev libboost-all-dev libcurl4-openssl-dev libexpat1-dev libcppunit-dev binutils-dev debhelper  zlib1g-dev dpkg-dev pkg-config</li></ul></li><li><p>The Next Steps, <a href="http://yourcmc.ru/wiki/Grive2#Download_sources" target="_blank" rel="noopener">grive2 wiki</a>, or the <a href="https://github.com/vitalif/grive2" target="_blank" rel="noopener">grive2 github</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Purpose&quot;&gt;&lt;a href=&quot;#Purpose&quot; class=&quot;headerlink&quot; title=&quot;Purpose&quot;&gt;&lt;/a&gt;Purpose&lt;/h3&gt;&lt;p&gt;To share directory between windows and linux envir
      
    
    </summary>
    
      <category term="quotes" scheme="xvirt.ink/categories/quotes/"/>
    
    
      <category term="tool" scheme="xvirt.ink/tags/tool/"/>
    
      <category term="Driver" scheme="xvirt.ink/tags/Driver/"/>
    
  </entry>
  
  <entry>
    <title>Learn Vim</title>
    <link href="xvirt.ink/2018/09/08/vim/"/>
    <id>xvirt.ink/2018/09/08/vim/</id>
    <published>2018-09-08T13:17:05.000Z</published>
    <updated>2018-10-06T08:56:21.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vim-Modes"><a href="#Vim-Modes" class="headerlink" title="Vim Modes"></a>Vim Modes</h3><ul><li>Vim modes switch<br><img src="vim-modes.png" alt="Vim Modes Switch"></li><li>Remap &lt;Esc> key, changing <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/06.html" target="_blank" rel="noopener">the leader key</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cat ~/.vimrc </span><br><span class="line">inoremap jk &lt;Esc&gt;</span><br><span class="line">let mapleader=&quot;&lt;Space&gt;&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Free-Online-Resources-to-Learn-Vim"><a href="#Free-Online-Resources-to-Learn-Vim" class="headerlink" title="Free Online Resources to Learn Vim"></a>Free Online Resources to Learn Vim</h3><ul><li><a href="https://www.vim.org" target="_blank" rel="noopener">vim</a>, vimtutor</li><li><a href="https://www.openvim.com" target="_blank" rel="noopener">openvim</a></li><li><a href="http://vimcasts.org" target="_blank" rel="noopener">vimcasts</a></li><li><a href="http://www.vimgenius.com" target="_blank" rel="noopener">vim genius</a></li><li><a href="https://vim.rtorr.com" target="_blank" rel="noopener">vim cheet sheet</a></li><li><a href="https://www.vim.org/scripts/script.php?script_id=3409" target="_blank" rel="noopener">HJKL-learning game</a></li><li><a href="https://vim-adventures.com" target="_blank" rel="noopener">vim-adventures game</a></li></ul><h3 id="Vedios-and-Blogs"><a href="#Vedios-and-Blogs" class="headerlink" title="Vedios and Blogs"></a>Vedios and Blogs</h3><ul><li><a href="http://derekwyatt.org/vim/tutorials/index.html" target="_blank" rel="noopener">vim vedios</a></li><li><a href="https://vimeo.com/search?q=welcom+to+vim" target="_blank" rel="noopener">basics of vim</a></li><li><a href="https://www.labnol.org/internet/learning-vim-for-beginners/28820/" target="_blank" rel="noopener">Learning Vim for Beginners</a></li><li><a href="https://medium.com/actualize-network/how-to-learn-vim-a-four-week-plan-cd8b376a9b85" target="_blank" rel="noopener">How To Learn Vim: A Four Week Plan</a></li></ul><h3 id="Frequent-Commands"><a href="#Frequent-Commands" class="headerlink" title="Frequent Commands"></a>Frequent Commands</h3><ul><li>One line<ul><li>Ctrl+Y → Move viewport down</li><li>Ctrl+E → Move viewport up (Extra lines)</li></ul></li><li>Full screen<ul><li>Ctrl+F → Move viewport Forward</li><li>Ctrl+B → Move viewport Backward</li></ul></li><li>Half a screen<ul><li>Ctrl+U → Move viewport Up</li><li>Ctrl+D → Move viewport Down</li></ul></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://danielmiessler.com/study/vim/" target="_blank" rel="noopener">A vim Tutorial and Primer</a></li><li><a href="http://learnvimscriptthehardway.stevelosh.com/" target="_blank" rel="noopener">Learn Vimscript the Hard Way</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vim-Modes&quot;&gt;&lt;a href=&quot;#Vim-Modes&quot; class=&quot;headerlink&quot; title=&quot;Vim Modes&quot;&gt;&lt;/a&gt;Vim Modes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Vim modes switch&lt;br&gt;&lt;img src=&quot;vim-mo
      
    
    </summary>
    
      <category term="quotes" scheme="xvirt.ink/categories/quotes/"/>
    
    
      <category term="tool" scheme="xvirt.ink/tags/tool/"/>
    
      <category term="vim" scheme="xvirt.ink/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Netfilter Framework</title>
    <link href="xvirt.ink/2018/09/07/netfilter/"/>
    <id>xvirt.ink/2018/09/07/netfilter/</id>
    <published>2018-09-07T13:13:41.000Z</published>
    <updated>2019-05-11T23:32:51.238Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://ipset.netfilter.org" target="_blank" rel="noopener">IP sets</a>, <a href="http://www.linuxvirtualserver.org" target="_blank" rel="noopener">ipvs</a> all based on the Linux kernel <a href="https://www.netfilter.org" target="_blank" rel="noopener">netfilter</a> subsystem.</p><h3 id="Key-Structures-Variables-and-Functions"><a href="#Key-Structures-Variables-and-Functions" class="headerlink" title="Key Structures, Variables and Functions"></a>Key Structures, Variables and Functions</h3><ul><li>net/netfilter/core.c: <a href="https://elixir.bootlin.com/linux/latest/ident/nf_hooks_needed" target="_blank" rel="noopener">struct static_key <em>nf_hooks_needed[][]</em></a>, in the old kernel version <em>nf_hooks[][]</em> is defined.</li><li>include/uapi/linux/netfilter.h: <a href="https://elixir.bootlin.com/linux/latest/ident/nf_inet_hooks" target="_blank" rel="noopener">enum <em>nf_inet_hooks</em></a></li><li>include/uapi/linux/netfilter.h: <a href="https://elixir.bootlin.com/linux/latest/ident/NFPROTO_NUMPROTO" target="_blank" rel="noopener"><em>NFPROTO_NUMPROTO</em></a></li><li>include/uapi/linux/netfilter_ipv4.h: <a href="https://elixir.bootlin.com/linux/latest/ident/nf_ip_hook_priorities" target="_blank" rel="noopener">enum <em>nf_iphook_priorities</em></a>, list the most common tables(priority from high to low):<ul><li>NF_IP_PRI_RAW(-300), <a href="https://elixir.bootlin.com/linux/latest/ident/packet_raw" target="_blank" rel="noopener">packet_raw</a></li><li>NF_IP_PRI_CONNTRACK(-200), <a href="https://elixir.bootlin.com/linux/latest/ident/nf_conntrack_l3proto_ipv4_init" target="_blank" rel="noopener">nf_conntrack_l3proto_ipv4_init</a>, <a href="https://elixir.bootlin.com/linux/latest/ident/ipv4_conntrack_ops" target="_blank" rel="noopener">ipv4_conntrack_ops</a></li><li>NF_IP_PRI_MANGLE(-150), <a href="https://elixir.bootlin.com/linux/latest/ident/packet_mangler" target="_blank" rel="noopener">packet_mangler</a></li><li>NF_IP_PRI_NAT_DST(-100), <a href="https://elixir.bootlin.com/linux/latest/ident/nf_nat_ipv4_table" target="_blank" rel="noopener">nf_nat_ipv4_table</a>, <a href="https://elixir.bootlin.com/linux/latest/ident/nf_nat_ipv4_ops" target="_blank" rel="noopener">nf_nat_ipv4_ops</a></li><li>NF_IP_PRI_FILTER(0), <a href="https://elixir.bootlin.com/linux/latest/ident/packet_filter" target="_blank" rel="noopener">packet_filter</a></li><li>NF_IP_PRI_NAT_SRC(100), <a href="https://elixir.bootlin.com/linux/latest/ident/nf_nat_ipv4_table" target="_blank" rel="noopener">nf_nat_ipv4_table</a>, <a href="https://elixir.bootlin.com/linux/latest/ident/nf_nat_ipv4_ops" target="_blank" rel="noopener">nf_nat_ipv4_ops</a></li><li>NF_IP_PRI_CONNTRACK_HELPER(300), <a href="https://elixir.bootlin.com/linux/latest/ident/ipv4_conntrack_ops" target="_blank" rel="noopener">ipv4_conntrack_ops</a></li><li>NF_IP_PRI_CONNTRACK_CONFIRM(INT_MAX), <a href="https://elixir.bootlin.com/linux/latest/ident/ipv4_conntrack_ops" target="_blank" rel="noopener">ipv4_conntrack_ops</a></li></ul></li><li><a href="https://elixir.bootlin.com/linux/latest/ident/NF_HOOK" target="_blank" rel="noopener"><em>NF_HOOK()</em></a></li><li><a href="https://elixir.bootlin.com/linux/latest/ident/ipt_register_table" target="_blank" rel="noopener"><em>ipt_register_table()</em></a></li><li><a href="https://elixir.bootlin.com/linux/latest/ident/nf_register_net_hook" target="_blank" rel="noopener"><em>nf_register_net_hook()</em></a>, in the old kernel version <em>nf_register_hook</em> is defined.</li></ul><h3 id="Netfilter-Hooks-and-Tables"><a href="#Netfilter-Hooks-and-Tables" class="headerlink" title="Netfilter Hooks and Tables"></a>Netfilter Hooks and Tables</h3><ul><li><p>Netfilter Hooks in Kernel<br><img src="hooks-in-kernel.png" alt="Netfilter Hooks in Kernel"></p></li><li><p>Tables in Netfilter Hooks<br><img src="tables-in-hook.png" alt="Tables in Netfilter Hooks"><br>Note: Dnat table in LOCAL_OUT actually is POST_RETOUING, but after modifty destination address/port called <a href="https://elixir.bootlin.com/linux/latest/ident/ip_route_me_harder" target="_blank" rel="noopener"><em>ip_route_me_harder()</em></a>, used by iptable_nat and iptable_mangle + ip_queue, in <em>function nf_nat_ipv4_local_fn()</em>.</p></li><li><p>Detail of Connection Tracking Hooks<br><img src="conntrack-hooks.png" alt="Detail of Connection Tracking Hooks"><br>For packet received, routing decision is done by <a href="https://elixir.bootlin.com/linux/latest/ident/ip_mkroute_input" target="_blank" rel="noopener"><em>ip_mkroute_input()</em></a> called by <em>ip_rcv_finish()</em>, while the local out packet routing is <a href="https://elixir.bootlin.com/linux/latest/ident/__mkroute_output" target="_blank" rel="noopener"><em>__mkroute_output()</em></a>.</p></li><li><p>Transport Layer Trace(CentOS 7.4.1708 kernel-3.10.0.693)<br>inet_init(): struct net_protocol inet_protos[MAX_INET_PROTOS], e.g. udp_protocol, tcp_protocol, igmp_protocol, icmp_protocol.</p><ul><li><p>UDP receive path:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ip_rcv_finish() --&gt; ip_route_input_slow() --&gt;ip_route_input_slow()</span><br><span class="line">--&gt; forward: ip_mkroute_input() --&gt; rth-&gt;dst.input = ip_forward;</span><br><span class="line">--&gt; local_input: rth-&gt;dst.input= ip_local_deliver; </span><br><span class="line">--&gt; skb_dst(skb)-&gt;input() --&gt; ip_local_deliver() --&gt; ip_local_deliver_finish() --&gt; ipprot-&gt;handler()</span><br><span class="line">--&gt; udp_rcv() --&gt; __udp4_lib_rcv() --&gt; udp_queue_rcv_skb() --&gt; __udp_enqueue_schedule_skb() --&gt; sk-&gt;sk_data_ready() --&gt; sock_def_readable()</span><br><span class="line">--&gt;__wake_up_common() --&gt; curr-&gt;func() --&gt; default_wake_function() --&gt; try_to_wake_up() --&gt; ttwu_queue()</span><br></pre></td></tr></table></figure></li><li><p>UDP send path:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">udp_sendmsg() --&gt; ip_route_output_flow() --&gt; (struct xfrm_policy_afinfo *) -&gt;dst_lookup() --&gt; struct xfrm_policy_afinfo xfrm4_policy_afinfo</span><br><span class="line">--&gt; xfrm4_dst_lookup() --&gt; __ip_route_output_key() --&gt; __mkroute_output()</span><br><span class="line">--&gt; rth-&gt;dst.input = ip_local_deliver;</span><br><span class="line">--&gt; rth-&gt;dst.output = ip_output;</span><br><span class="line">--&gt; udp_send_skb() --&gt; ip_local_out() --&gt; ip_output()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Userspace-Tools"><a href="#Userspace-Tools" class="headerlink" title="Userspace Tools"></a>Userspace Tools</h3><ul><li>iptables, ip6tables, arptables, ebtables</li><li><a href="https://lwn.net/Articles/564095/" target="_blank" rel="noopener">nftables</a></li><li>bpfilter, <a href="https://lwn.net/Articles/747551/" target="_blank" rel="noopener">BPF comes to firewalls</a></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>Linux Kernel Networking: Implemetation and Theory</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://ipset.netfilter.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IP sets&lt;/a&gt;, &lt;a href=&quot;http://www.linuxvirtualserver.org&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="kernel" scheme="xvirt.ink/tags/kernel/"/>
    
      <category term="netfilter" scheme="xvirt.ink/tags/netfilter/"/>
    
  </entry>
  
  <entry>
    <title>Open vSwitch Conntrack</title>
    <link href="xvirt.ink/2018/09/02/ovs-conntrack/"/>
    <id>xvirt.ink/2018/09/02/ovs-conntrack/</id>
    <published>2018-09-02T11:20:00.000Z</published>
    <updated>2018-09-09T14:32:03.348Z</updated>
    
    <content type="html"><![CDATA[<p>OVS can be used with the Connection tracking system where OpenFlow flow can be used to match on the state of a TCP, UDP, ICMP, etc., connections. (Connection tracking system supports tracking of both statefull and stateless protocols)</p><h3 id="Match-Fields"><a href="#Match-Fields" class="headerlink" title="Match Fields"></a>Match Fields</h3><ul><li><strong>ct_state</strong>: new, est, rel, rpl, inv, trk, snat, dnat</li><li><strong>ct_zone</strong>: A zone is an independent connection tracking context which can be set by a ct action. A 16-bit ct_zone set by the most recent ct action (by an OpenFlow flow on a conntrack entry) can be used as a match field in another flow entry.</li><li><strong>ct_mark</strong>: The 32-bit metadata committed, by an action within the exec parameter to the ct action, to the connection to which the current packet belongs.</li><li><strong>ct_label</strong>: The 128-bit label committed by an action within the exec parameter to the ct action, to the connection to which the current packet belongs.</li><li><strong>ct_nw_src/ct_ipv6_src</strong>: Matches IPv4/IPv6 conntrack original direction tuple source address.</li><li><strong>ct_nw_dst/ct_ipv6_dst</strong>: Matches IPv4/IPv6 conntrack original direction tuple destination address.</li><li><strong>ct_nw_proto</strong>: Matches conntrack original direction tuple IP protocol type.</li><li><strong>ct_tp_src</strong>: Matches on the conntrack original direction tuple transport source port.</li><li><strong>ct_tp_dst</strong>: Matches on the conntrack original direction tuple transport destination port.</li></ul><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><ul><li><strong>commit</strong>: Commit the connection to the connection tracking module which will be stored beyond the lifetime of packet in the pipeline.</li><li><strong>force</strong>: The force flag may be used in addition to commit flag to effectively terminate the existing connection and start a new one in the current direction.</li><li><strong>table=number</strong>: Fork pipeline processing in two. The original instance of the packet will continue processing the current actions list as an untracked packet. An additional instance of the packet will be sent to the connection tracker, which will be re-injected into the OpenFlow pipeline to resume processing in table number, with the ct_state and other ct match fields set.</li><li><strong>zone=value OR zone=src[start..end]</strong>: A 16-bit context id that can be used to isolate connections into separate domains, allowing over‐lapping network addresses in different zones. If a zone is not provided, then the default is to use zone zero.</li><li>exec([action][,action…])**: Perform restricted set of actions within the context of connection tracking. Only actions which modify the ct_mark or ct_label fields are accepted within the exec action.</li><li><strong>alg=&lt;ftp/tftp&gt;</strong>: Specify alg (application layer gateway) to track specific connection types.</li><li><strong>nat</strong>: Specifies the address and port translation for the connection being tracked.</li></ul><h3 id="Setup-Enviroment"><a href="#Setup-Enviroment" class="headerlink" title="Setup Enviroment"></a>Setup Enviroment</h3><ul><li><p>Topology for conntrack testing<br><img src="ovs-conntrack-bridge.png" alt="Topology for conntrack testing"></p></li><li><p>Start openvswitch service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/share/openvswitch/scripts/ovs-ctl start</span><br></pre></td></tr></table></figure></li><li><p>Create bridge, namespace and port</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ip netns add left</span><br><span class="line">$ ip netns add right</span><br><span class="line">$</span><br><span class="line">$ ip link add veth_l0 type veth peer name veth_l1</span><br><span class="line">$ ip link set veth_l1 netns left</span><br><span class="line">$ ip link add veth_r0 type veth peer name veth_r1</span><br><span class="line">$ ip link set veth_r1 netns right</span><br><span class="line">$</span><br><span class="line">$ ovs-vsctl add-br br0</span><br><span class="line">$ ovs-vsctl add-port br0 veth_l0</span><br><span class="line">$ ovs-vsctl add-port br0 veth_r0</span><br></pre></td></tr></table></figure></li><li><p>Add flows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=10, in_port=veth_l0, actions=veth_r0&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=10, in_port=veth_r0, actions=veth_l0&quot;</span><br><span class="line">$</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">   &quot;table=0, priority=50, ct_state=-trk, tcp, in_port=veth_l0, actions=ct(table=0)&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=50, ct_state=+new, tcp, in_port=veth_l0, actions=ct(commit),veth_r0&quot;</span><br><span class="line">$</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=50, ct_state=-trk, tcp, in_port=veth_r0, actions=ct(table=0)&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=50, ct_state=+est, tcp, in_port=veth_r0, actions=veth_l0&quot;</span><br><span class="line">$</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=50, ct_state=+est, tcp, in_port=veth_l0, actions=veth_r0&quot;</span><br><span class="line">$</span><br><span class="line"># ovs-ofctl dump-flows br0</span><br><span class="line"> cookie=0x0, duration=1405.483s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=-trk,tcp,in_port=&quot;veth_l0&quot; actions=ct(table=0)</span><br><span class="line"> cookie=0x0, duration=43.364s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=-trk,tcp,in_port=&quot;veth_r0&quot; actions=ct(table=0)</span><br><span class="line"> cookie=0x0, duration=59.531s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=+new,tcp,in_port=&quot;veth_l0&quot; actions=ct(commit),output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=33.071s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=+est,tcp,in_port=&quot;veth_r0&quot; actions=output:&quot;veth_l0&quot;</span><br><span class="line"> cookie=0x0, duration=20.592s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=+est,tcp,in_port=&quot;veth_l0&quot; actions=output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=1423.495s, table=0, n_packets=0, n_bytes=0, priority=10,in_port=&quot;veth_l0&quot; actions=output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=1414.843s, table=0, n_packets=0, n_bytes=0, priority=10,in_port=&quot;veth_r0&quot; actions=output:&quot;veth_l0&quot;</span><br><span class="line"> cookie=0x0, duration=1448.989s, table=0, n_packets=0, n_bytes=0, priority=0 actions=NORMAL</span><br></pre></td></tr></table></figure></li><li><p>Install <a href="https://scapy.net" target="_blank" rel="noopener">scapy</a>, <a href="https://scapy.readthedocs.io/en/latest/installation.html" target="_blank" rel="noopener">installation guide</a></p></li><li><p>Send packet with scapy, connection setup, transfer data, and connection teardown.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip netns exec left sudo ip link set lo up</span><br><span class="line">$ sudo ip netns exec left sudo ip link set veth_l1 up</span><br><span class="line">$ sudo ip netns exec right sudo ip link set lo up</span><br><span class="line">$ sudo ip netns exec right sudo ip link set veth_r1 up</span><br><span class="line">$ sudo ifconfig veth_l0 up</span><br><span class="line">$ sudo ifconfig veth_r0 up</span><br><span class="line"></span><br><span class="line">$ sudo ip netns exec left sudo `which scapy`</span><br><span class="line">$ sudo ip netns exec right sudo `which scapy`</span><br><span class="line">$</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x02, seq=100), iface=&quot;veth_l1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;10.0.0.2&quot;, dst=&quot;192.168.0.2&quot;)/TCP(sport=2048, dport=1024, flags=0x12, seq=200, ack=101), iface=&quot;veth_r1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x10, seq=101, ack=201), iface=&quot;veth_l1&quot;)</span><br><span class="line">$</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x10, seq=101, ack=201)/&quot;X&quot;, iface=&quot;veth_l1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;10.0.0.2&quot;, dst=&quot;192.168.0.2&quot;)/TCP(sport=2048, dport=1024, flags=0X10, seq=201, ack=102), iface=&quot;veth_r1&quot;)</span><br><span class="line">$</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x11, seq=102, ack=201), iface=&quot;veth_l1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;10.0.0.2&quot;, dst=&quot;192.168.0.2&quot;)/TCP(sport=2048, dport=1024, flags=0X11, seq=201, ack=103), iface=&quot;veth_r1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x10, seq=103, ack=202), iface=&quot;veth_l1&quot;)</span><br></pre></td></tr></table></figure></li><li><p>Monitor the conntrack and flow changes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=SYN_SENT)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=ESTABLISHED)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=ESTABLISHED)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=ESTABLISHED)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=ESTABLISHED)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=FIN_WAIT_1)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=LAST_ACK)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=TIME_WAIT)</span><br><span class="line">$</span><br><span class="line"># ovs-appctl dpctl/dump-flows</span><br><span class="line">recirc_id(0),in_port(3),ct_state(-trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:ct,recirc(0xa)</span><br><span class="line">recirc_id(0xa),in_port(3),ct_state(-new+est+trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:2</span><br><span class="line"># ovs-appctl dpctl/dump-flows</span><br><span class="line">recirc_id(0xb),in_port(2),ct_state(-new+est+trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:3</span><br><span class="line">recirc_id(0),in_port(2),ct_state(-trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:ct,recirc(0xb)</span><br><span class="line"># ovs-appctl dpctl/dump-flows</span><br><span class="line">recirc_id(0xd),in_port(3),ct_state(-new+est+trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:2</span><br><span class="line">recirc_id(0),in_port(3),ct_state(-trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:ct,recirc(0xd)</span><br><span class="line"># ovs-appctl dpctl/dump-flows</span><br><span class="line">recirc_id(0xf),in_port(3),ct_state(-new+est+trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:2</span><br><span class="line">recirc_id(0),in_port(3),ct_state(-trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:ct,recirc(0xf)</span><br><span class="line">$</span><br><span class="line"># ovs-ofctl dump-flows br0</span><br><span class="line"> cookie=0x0, duration=2676.690s, table=0, n_packets=8, n_bytes=434, priority=50,ct_state=-trk,tcp,in_port=&quot;veth_l0&quot; actions=ct(table=0)</span><br><span class="line"> cookie=0x0, duration=1314.571s, table=0, n_packets=4, n_bytes=216, priority=50,ct_state=-trk,tcp,in_port=&quot;veth_r0&quot; actions=ct(table=0)</span><br><span class="line"> cookie=0x0, duration=1330.738s, table=0, n_packets=2, n_bytes=108, priority=50,ct_state=+new,tcp,in_port=&quot;veth_l0&quot; actions=ct(commit),output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=1304.278s, table=0, n_packets=4, n_bytes=216, priority=50,ct_state=+est,tcp,in_port=&quot;veth_r0&quot; actions=output:&quot;veth_l0&quot;</span><br><span class="line"> cookie=0x0, duration=1291.799s, table=0, n_packets=6, n_bytes=326, priority=50,ct_state=+est,tcp,in_port=&quot;veth_l0&quot; actions=output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=2694.702s, table=0, n_packets=8, n_bytes=648, priority=10,in_port=&quot;veth_l0&quot; actions=output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=2686.050s, table=0, n_packets=8, n_bytes=648, priority=10,in_port=&quot;veth_r0&quot; actions=output:&quot;veth_l0&quot;</span><br><span class="line"> cookie=0x0, duration=2720.196s, table=0, n_packets=0, n_bytes=0, priority=0 actions=NORMA</span><br></pre></td></tr></table></figure></li></ul><h3 id="Shorten-Packet-Path-in-Openstack-with-conntrack-support"><a href="#Shorten-Packet-Path-in-Openstack-with-conntrack-support" class="headerlink" title="Shorten Packet Path in Openstack with conntrack support"></a>Shorten Packet Path in Openstack with conntrack support</h3><ul><li>Ovs in Openstack without conntrack support<br><img src="old-ovs-in-openstack.png" alt="Ovs in Openstack without conntrack support"></li><li>Ovs in Openstack with conntrack support<br><img src="new-ovs-conntract.png" alt="Ovs in Openstack with conntrack support"></li><li>Query conntrack info in kernel<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/net/nf_conntrack</span><br><span class="line">$ cat /proc/sys/net/nf_conntrack_max</span><br><span class="line">$ nstat</span><br><span class="line">$ cat /proc/net/snmp</span><br></pre></td></tr></table></figure></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://docs.openvswitch.org/en/latest/intro/install/general/" target="_blank" rel="noopener">Open vSwitch on Linux</a></li><li><a href="http://docs.openvswitch.org/en/latest/tutorials/ovs-conntrack/" target="_blank" rel="noopener">Open vSwitch Conntrack</a></li><li><a href="https://redhatstackblog.redhat.com/2016/07/22/how-connection-tracking-in-open-vswitch-helps-openstack-performance/" target="_blank" rel="noopener">How connection tracking in Open vSwitch helps OpenStack performance</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OVS can be used with the Connection tracking system where OpenFlow flow can be used to match on the state of a TCP, UDP, ICMP, etc., conn
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="Open vSwitch" scheme="xvirt.ink/tags/Open-vSwitch/"/>
    
      <category term="conntrack" scheme="xvirt.ink/tags/conntrack/"/>
    
  </entry>
  
  <entry>
    <title>Run OvS with ovs-sandbox</title>
    <link href="xvirt.ink/2018/09/02/Run-Ovs-with-ovs-sandbox/"/>
    <id>xvirt.ink/2018/09/02/Run-Ovs-with-ovs-sandbox/</id>
    <published>2018-09-02T05:11:08.000Z</published>
    <updated>2018-09-08T13:13:27.878Z</updated>
    
    <content type="html"><![CDATA[<p>Prepare the Linux environment, you can run a virtual machine, a centos 7.4 image, with <a href="https://www.virtualbox.org" target="_blank" rel="noopener">virtual box</a>.</p><h4 id="Install-development-enviroment"><a href="#Install-development-enviroment" class="headerlink" title="Install development enviroment"></a>Install development enviroment</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install git</span><br><span class="line">$ yum groupinstall &quot;Development tools&quot;</span><br></pre></td></tr></table></figure><h4 id="Download-Open-vSwitch-source-code"><a href="#Download-Open-vSwitch-source-code" class="headerlink" title="Download Open vSwitch source code"></a>Download Open vSwitch source code</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/openvswitch/ovs.git</span><br><span class="line">$ git branch --remote</span><br><span class="line">$ git branch branch-2.10</span><br></pre></td></tr></table></figure><h4 id="Compile-Open-vSwitch"><a href="#Compile-Open-vSwitch" class="headerlink" title="Compile Open vSwitch"></a>Compile Open vSwitch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd ./ovs</span><br><span class="line">$ sh ./boot.sh</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ ./tutorial/ovs-sandbox</span><br></pre></td></tr></table></figure><h3 id="Open-vSwitch-Advanced-Features"><a href="#Open-vSwitch-Advanced-Features" class="headerlink" title="Open vSwitch Advanced Features"></a>Open vSwitch Advanced Features</h3><h4 id="We-will-construct-Open-vSwitch-flow-tables-for-a-VLAN-capable-MAC-learning-switch-that-has-four-ports"><a href="#We-will-construct-Open-vSwitch-flow-tables-for-a-VLAN-capable-MAC-learning-switch-that-has-four-ports" class="headerlink" title="We will construct Open vSwitch flow tables for a VLAN-capable, MAC-learning switch that has four ports:"></a>We will construct Open vSwitch flow tables for a VLAN-capable, MAC-learning switch that has four ports:</h4><ul><li>p1: a trunk port that carries all VLANs, on OpenFlow port 1.</li><li>p2: an access port for VLAN 20, on OpenFlow port 2.</li><li>p3, p4: both access ports for VLAN 30, on OpenFlow ports 3 and 4, respectively.</li></ul><h4 id="Our-switch-design-will-consist-of-five-main-flow-tables-each-of-which-implements-one-stage-in-the-switch-pipeline"><a href="#Our-switch-design-will-consist-of-five-main-flow-tables-each-of-which-implements-one-stage-in-the-switch-pipeline" class="headerlink" title="Our switch design will consist of five main flow tables, each of which implements one stage in the switch pipeline:"></a>Our switch design will consist of five main flow tables, each of which implements one stage in the switch pipeline:</h4><ul><li>Table 0: Admission control.</li><li>Table 1: VLAN input processing.</li><li>Table 2: Learn source MAC and VLAN for ingress port.</li><li>Table 3: Look up learned port for destination MAC and VLAN.</li><li>Table 4: Output processing.</li></ul><h4 id="Setup-the-switch-and-ports"><a href="#Setup-the-switch-and-ports" class="headerlink" title="Setup the switch and ports"></a>Setup the switch and ports</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ovs-vsctl add-br br0 -- set Bridge br0 fail-mode=secure \</span><br><span class="line">$ ovs-vsctl add-port br0 p1 -- set Interface p1 ofport_request=1; ovs-ofctl mod-port br0 p1 up</span><br><span class="line">$ ovs-vsctl add-port br0 p2 -- set Interface p2 ofport_request=2; ovs-ofctl mod-port br0 p2 up</span><br><span class="line">$ ovs-vsctl add-port br0 p3 -- set Interface p3 ofport_request=3; ovs-ofctl mod-port br0 p3 up</span><br><span class="line">$ ovs-vsctl add-port br0 p4 -- set Interface p4 ofport_request=4; ovs-ofctl mod-port br0 p4 up</span><br></pre></td></tr></table></figure><h3 id="Implementing-tables"><a href="#Implementing-tables" class="headerlink" title="Implementing tables"></a>Implementing tables</h3><h4 id="Table-0-Multicase-source-address-and-stp-packets-are-not-forwarded-the-others-are-valid"><a href="#Table-0-Multicase-source-address-and-stp-packets-are-not-forwarded-the-others-are-valid" class="headerlink" title="Table 0: Multicase source address and stp packets are not forwarded, the others are valid."></a>Table 0: Multicase source address and stp packets are not forwarded, the others are valid.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 &quot;table=0, dl_src=01:00:00:00:00:00/01:00:00:00:00:00, actions=drop&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 &quot;table=0, dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0, actions=drop&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 &quot;table=0, priority=0, actions=resubmit(,1)&quot;</span><br></pre></td></tr></table></figure><h4 id="Table-1-vlan-input-processing-the-default-policy-is-“drop”"><a href="#Table-1-vlan-input-processing-the-default-policy-is-“drop”" class="headerlink" title="Table 1: vlan input processing, the default policy is “drop”."></a>Table 1: vlan input processing, the default policy is “drop”.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 &quot;table=1, priority=0, actions=drop&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 &quot;table=1, priority=99, in_port=1, actions=resubmit(,2)&quot;</span><br><span class="line">$ ovs-ofctl add-flows br0 - &lt;&lt;&apos;EOF&apos;</span><br><span class="line">table=1, priority=99, in_port=2, vlan_tci=0, actions=mod_vlan_vid:20, resubmit(,2)</span><br><span class="line">table=1, priority=99, in_port=3, vlan_tci=0, actions=mod_vlan_vid:30, resubmit(,2)</span><br><span class="line">table=1, priority=99, in_port=4, vlan_tci=0, actions=mod_vlan_vid:30, resubmit(,2)</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="Table-2-MAC-VLAN-Learning-for-Ingress-Port"><a href="#Table-2-MAC-VLAN-Learning-for-Ingress-Port" class="headerlink" title="Table 2: MAC+VLAN Learning for Ingress Port"></a>Table 2: MAC+VLAN Learning for Ingress Port</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=2 actions=learn(table=10, NXM_OF_VLAN_TCI[0..11], \</span><br><span class="line">                           NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[], \</span><br><span class="line">                           load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15]), \</span><br><span class="line">                     resubmit(,3)&quot;</span><br></pre></td></tr></table></figure><h4 id="Table-3-Look-Up-Destination-Port"><a href="#Table-3-Look-Up-Destination-Port" class="headerlink" title="Table 3: Look Up Destination Port"></a>Table 3: Look Up Destination Port</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=3 priority=50 actions=resubmit(,10), resubmit(,4)&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=3 priority=99 dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 actions=resubmit(,4)&quot;</span><br></pre></td></tr></table></figure><h4 id="Table-4-Output-Processing"><a href="#Table-4-Output-Processing" class="headerlink" title="Table 4: Output Processing"></a>Table 4: Output Processing</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 &quot;table=4 reg0=1 actions=1&quot;</span><br><span class="line">$ ovs-ofctl add-flows br0 - &lt;&lt;&apos;EOF&apos;</span><br><span class="line">table=4 reg0=2 actions=strip_vlan,2</span><br><span class="line">table=4 reg0=3 actions=strip_vlan,3</span><br><span class="line">table=4 reg0=4 actions=strip_vlan,4</span><br><span class="line">EOF</span><br><span class="line">$ ovs-ofctl add-flows br0 - &lt;&lt;&apos;EOF&apos;</span><br><span class="line">table=4 reg0=0 priority=99 dl_vlan=20 actions=1,strip_vlan,2</span><br><span class="line">table=4 reg0=0 priority=99 dl_vlan=30 actions=1,strip_vlan,3,4</span><br><span class="line">table=4 reg0=0 priority=50            actions=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="Dump-all-the-table-flows"><a href="#Dump-all-the-table-flows" class="headerlink" title="Dump all the table flows"></a>Dump all the table flows</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># ovs-ofctl dump-flows br0</span><br><span class="line"> cookie=0x0, duration=4157.126s, table=0, n_packets=0, n_bytes=0, dl_src=01:00:00:00:00:00/01:00:00:00:00:00 actions=drop</span><br><span class="line"> cookie=0x0, duration=4146.396s, table=0, n_packets=0, n_bytes=0, dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0 actions=drop</span><br><span class="line"> cookie=0x0, duration=4136.741s, table=0, n_packets=0, n_bytes=0, priority=0 actions=resubmit(,1)</span><br><span class="line"> cookie=0x0, duration=4073.263s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p1 actions=resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=3829.544s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p2,vlan_tci=0x0000 actions=mod_vlan_vid:20,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=3829.468s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p3,vlan_tci=0x0000 actions=mod_vlan_vid:30,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=3829.468s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p4,vlan_tci=0x0000 actions=mod_vlan_vid:30,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=4089.873s, table=1, n_packets=0, n_bytes=0, priority=0 actions=drop</span><br><span class="line"> cookie=0x0, duration=3682.963s, table=2, n_packets=0, n_bytes=0, actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15]),resubmit(,3)</span><br><span class="line"> cookie=0x0, duration=3645.636s, table=3, n_packets=0, n_bytes=0, priority=99,dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 actions=resubmit(,4)</span><br><span class="line"> cookie=0x0, duration=3549.407s, table=3, n_packets=0, n_bytes=0, priority=50 actions=resubmit(,10),resubmit(,4)</span><br><span class="line"> cookie=0x0, duration=3512.926s, table=4, n_packets=0, n_bytes=0, reg0=0x1 actions=output:p1</span><br><span class="line"> cookie=0x0, duration=1534.991s, table=4, n_packets=0, n_bytes=0, reg0=0x2 actions=strip_vlan,output:p2</span><br><span class="line"> cookie=0x0, duration=1534.990s, table=4, n_packets=0, n_bytes=0, reg0=0x3 actions=strip_vlan,output:p3</span><br><span class="line"> cookie=0x0, duration=1534.990s, table=4, n_packets=0, n_bytes=0, reg0=0x4 actions=strip_vlan,output:p4</span><br><span class="line"> cookie=0x0, duration=1515.987s, table=4, n_packets=0, n_bytes=0, priority=50,reg0=0 actions=output:p1</span><br><span class="line"> cookie=0x0, duration=1515.987s, table=4, n_packets=0, n_bytes=0, priority=99,reg0=0,dl_vlan=20 actions=output:p1,strip_vlan,output:p2</span><br><span class="line"> cookie=0x0, duration=1515.987s, table=4, n_packets=0, n_bytes=0, priority=99,reg0=0,dl_vlan=30 actions=output:p1,strip_vlan,output:p3,output:p4</span><br></pre></td></tr></table></figure><h3 id="Testing-Tables"><a href="#Testing-Tables" class="headerlink" title="Testing Tables"></a>Testing Tables</h3><h4 id="Testing-Table-0"><a href="#Testing-Table-0" class="headerlink" title="Testing Table 0"></a>Testing Table 0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 in_port=1,dl_dst=01:80:c2:00:00:05</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:05,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0, priority 32768</span><br><span class="line">    drop</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 in_port=1,dl_dst=01:80:c2:00:00:10</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:10,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,vlan_tci=0x0000/0x1fff,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:10/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br></pre></td></tr></table></figure><h4 id="Testing-Table-1"><a href="#Testing-Table-1" class="headerlink" title="Testing Table 1"></a>Testing Table 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 in_port=1,vlan_tci=5</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0005,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,vlan_tci=0x0005/0x1fff,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 in_port=2</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 in_port=2</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br><span class="line">[root@localhost ovs]# </span><br><span class="line">[root@localhost ovs]# </span><br><span class="line">[root@localhost ovs]# ovs-appctl ofproto/trace br0 in_port=2,vlan_tci=5</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0005,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. priority 0</span><br><span class="line">    drop</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0005,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br></pre></td></tr></table></figure><h4 id="Testing-Table-2"><a href="#Testing-Table-2" class="headerlink" title="Testing Table 2"></a>Testing Table 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,vlan_tci=20,dl_src=50:00:00:00:00:01 -generate</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0014,vlan_tci1=0x0000,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,vlan_tci=0x0014/0x1fff,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=2,dl_src=50:00:00:00:00:01 -generate</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 priority=32768 actions=load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br></pre></td></tr></table></figure><h4 id="Testing-Table-3"><a href="#Testing-Table-3" class="headerlink" title="Testing Table 3"></a>Testing Table 3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_vlan=20,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01 \</span><br><span class="line">&gt;     -generate</span><br><span class="line">Flow: in_port=1,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=20,dl_vlan_pcp=0,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,2</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=2,dl_src=90:00:00:00:00:01,dl_dst=f0:00:00:00:00:01 -generate</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=90:00:00:00:00:01,dl_dst=f0:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=90:00:00:00:00:01 priority=32768 actions=load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01, priority 32768</span><br><span class="line">            load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0x1, priority 32768</span><br><span class="line">    output:1</span><br><span class="line"></span><br><span class="line">Final flow: reg0=0x1,in_port=2,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=90:00:00:00:00:01,dl_dst=f0:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=90:00:00:00:00:01,dl_dst=f0:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_vlan=20,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01 \</span><br><span class="line">&gt;     -generate</span><br><span class="line">Flow: in_port=1,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. vlan_tci=0x0014/0x0fff,dl_dst=90:00:00:00:00:01, priority 32768</span><br><span class="line">            load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0x2, priority 32768</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line"></span><br><span class="line">Final flow: reg0=0x2,in_port=1,vlan_tci=0x0000,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=20,dl_vlan_pcp=0,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,2</span><br></pre></td></tr></table></figure><h4 id="Testing-Table-4"><a href="#Testing-Table-4" class="headerlink" title="Testing Table 4"></a>Testing Table 4</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br></pre></td><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=30</span><br><span class="line">Flow: in_port=1,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=30,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,3,4</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 in_port=3,dl_dst=ff:ff:ff:ff:ff:ff</span><br><span class="line">Flow: in_port=3,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=3,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:30</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=3,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=30,pcp=0),1,pop_vlan,4</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=ff:ff:ff:ff:ff:ff</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,vlan_tci=0x0000/0x1fff,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=55</span><br><span class="line">Flow: in_port=1,dl_vlan=55,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=55,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=20</span><br><span class="line">Flow: in_port=1,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,2</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=2,dl_dst=ff:ff:ff:ff:ff:ff</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=4,dl_dst=ff:ff:ff:ff:ff:ff</span><br><span class="line">Flow: in_port=4,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=4,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:30</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=4,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=30,pcp=0),1,pop_vlan,3</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=4,dl_dst=01:00:00:00:00:00</span><br><span class="line">Flow: in_port=4,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=4,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:30</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=4,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=30,pcp=0),1,pop_vlan,3</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=90:12:34:56:78:90,dl_vlan=20</span><br><span class="line">Flow: in_port=1,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,2</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=90:12:34:56:78:90,dl_vlan=30</span><br><span class="line">Flow: in_port=1,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=30,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,3,4</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_vlan=30,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01 \</span><br><span class="line">&gt;     -generate</span><br><span class="line">Flow: in_port=1,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x001e/0x0fff,dl_dst=10:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=30,dl_vlan_pcp=0,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,3,4</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=4,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01 -generate</span><br><span class="line">Flow: in_port=4,vlan_tci=0x0000,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=4,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:30</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x001e/0x0fff,dl_dst=20:00:00:00:00:01 priority=32768 actions=load:0x4-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. vlan_tci=0x001e/0x0fff,dl_dst=10:00:00:00:00:01, priority 32768</span><br><span class="line">            load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0x1, priority 32768</span><br><span class="line">    output:1</span><br><span class="line"></span><br><span class="line">Final flow: reg0=0x1,in_port=4,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=4,vlan_tci=0x0000,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=30,pcp=0),1</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_vlan=30,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01 \</span><br><span class="line">&gt;     -generate</span><br><span class="line">Flow: in_port=1,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x001e/0x0fff,dl_dst=10:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. vlan_tci=0x001e/0x0fff,dl_dst=20:00:00:00:00:01, priority 32768</span><br><span class="line">            load:0x4-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0x4, priority 32768</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: reg0=0x4,in_port=1,vlan_tci=0x0000,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=30,dl_vlan_pcp=0,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,4</span><br></pre></td></tr></table></figure><h3 id="The-learning-tables-table-10"><a href="#The-learning-tables-table-10" class="headerlink" title="The learning tables: table 10"></a>The learning tables: table 10</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># ovs-ofctl dump-flows br0</span><br><span class="line"> cookie=0x0, duration=5216.779s, table=0, n_packets=0, n_bytes=0, dl_src=01:00:00:00:00:00/01:00:00:00:00:00 actions=drop</span><br><span class="line"> cookie=0x0, duration=5206.049s, table=0, n_packets=0, n_bytes=0, dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0 actions=drop</span><br><span class="line"> cookie=0x0, duration=5196.394s, table=0, n_packets=0, n_bytes=0, priority=0 actions=resubmit(,1)</span><br><span class="line"> cookie=0x0, duration=5132.916s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p1 actions=resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=4889.197s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p2,vlan_tci=0x0000 actions=mod_vlan_vid:20,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=4889.121s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p3,vlan_tci=0x0000 actions=mod_vlan_vid:30,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=4889.121s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p4,vlan_tci=0x0000 actions=mod_vlan_vid:30,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=5149.526s, table=1, n_packets=0, n_bytes=0, priority=0 actions=drop</span><br><span class="line"> cookie=0x0, duration=4742.616s, table=2, n_packets=0, n_bytes=0, actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15]),resubmit(,3)</span><br><span class="line"> cookie=0x0, duration=4705.289s, table=3, n_packets=0, n_bytes=0, priority=99,dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 actions=resubmit(,4)</span><br><span class="line"> cookie=0x0, duration=4609.060s, table=3, n_packets=0, n_bytes=0, priority=50 actions=resubmit(,10),resubmit(,4)</span><br><span class="line"> cookie=0x0, duration=4572.579s, table=4, n_packets=0, n_bytes=0, reg0=0x1 actions=output:p1</span><br><span class="line"> cookie=0x0, duration=2594.644s, table=4, n_packets=0, n_bytes=0, reg0=0x2 actions=strip_vlan,output:p2</span><br><span class="line"> cookie=0x0, duration=2594.643s, table=4, n_packets=0, n_bytes=0, reg0=0x3 actions=strip_vlan,output:p3</span><br><span class="line"> cookie=0x0, duration=2594.643s, table=4, n_packets=0, n_bytes=0, reg0=0x4 actions=strip_vlan,output:p4</span><br><span class="line"> cookie=0x0, duration=2575.640s, table=4, n_packets=0, n_bytes=0, priority=50,reg0=0 actions=output:p1</span><br><span class="line"> cookie=0x0, duration=2575.640s, table=4, n_packets=0, n_bytes=0, priority=99,reg0=0,dl_vlan=20 actions=output:p1,strip_vlan,output:p2</span><br><span class="line"> cookie=0x0, duration=2575.640s, table=4, n_packets=0, n_bytes=0, priority=99,reg0=0,dl_vlan=30 actions=output:p1,strip_vlan,output:p3,output:p4</span><br><span class="line"> cookie=0x0, duration=602.623s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 actions=load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line"> cookie=0x0, duration=537.283s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line"> cookie=0x0, duration=494.330s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x0014/0x0fff,dl_dst=90:00:00:00:00:01 actions=load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line"> cookie=0x0, duration=134.061s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x001e/0x0fff,dl_dst=10:00:00:00:00:01 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line"> cookie=0x0, duration=101.484s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x001e/0x0fff,dl_dst=20:00:00:00:00:01 actions=load:0x4-&gt;NXM_NX_REG0[0..15]</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://docs.openvswitch.org/en/latest/intro/install/general/" target="_blank" rel="noopener">Open vSwitch on Linux</a><br><a href="http://docs.openvswitch.org/en/latest/tutorials/ovs-advanced/" target="_blank" rel="noopener">Open vSwitch Advanced Features</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Prepare the Linux environment, you can run a virtual machine, a centos 7.4 image, with &lt;a href=&quot;https://www.virtualbox.org&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="Open vSwitch" scheme="xvirt.ink/tags/Open-vSwitch/"/>
    
      <category term="ovs-sandbox" scheme="xvirt.ink/tags/ovs-sandbox/"/>
    
      <category term="flow table" scheme="xvirt.ink/tags/flow-table/"/>
    
      <category term="ofprot/trace" scheme="xvirt.ink/tags/ofprot-trace/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm the last but not the least</title>
    <link href="xvirt.ink/2018/08/31/algorithm-the-last/"/>
    <id>xvirt.ink/2018/08/31/algorithm-the-last/</id>
    <published>2018-08-31T14:18:42.000Z</published>
    <updated>2019-11-02T05:48:18.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dynamic-Programing"><a href="#Dynamic-Programing" class="headerlink" title="Dynamic Programing"></a>Dynamic Programing</h3><h4 id="knapsack-problem"><a href="#knapsack-problem" class="headerlink" title="knapsack problem"></a>knapsack problem</h4><ul><li>You’re a thief with a knapsack that can carry 4 lb of goods, You have four items that you can put into the knapsack.</li></ul><table><thead><tr><th style="text-align:left">Stereo</th><th style="text-align:left">Laptop</th><th style="text-align:left">Guitar</th><th style="text-align:left">Iphone</th></tr></thead><tbody><tr><td style="text-align:left">$3000</td><td style="text-align:left">$2000</td><td style="text-align:left">$1500</td><td style="text-align:left">$2000</td></tr><tr><td style="text-align:left">4lbs</td><td style="text-align:left">3lbs</td><td style="text-align:left">1lbs</td><td style="text-align:left">1lbs</td></tr></tbody></table><ul><li>solution of knapsack problem<br><img src="knapsack-problem.png" alt="solution of knapsack problem"></li></ul><h4 id="longest-common-substring"><a href="#longest-common-substring" class="headerlink" title="longest common substring"></a>longest common substring</h4><ul><li>calculate the longest common substring between <em>blue</em> and <em>clues</em>, <em>fosh</em> compare with <em>fish</em>, <em>fort</em>, longest common substring is used for word wrap.</li><li>solution of longest common substring<br><img src="longest-common-substring.png" alt="solution of longest common substring"></li></ul><h3 id="K-Nearest-Neighbors"><a href="#K-Nearest-Neighbors" class="headerlink" title="K-Nearest-Neighbors"></a>K-Nearest-Neighbors</h3><ul><li>Classification, categorization into a group.</li><li>Regression, predicting a response (like a number).</li><li>Feature extraction means converting an item (like a fruit or a user) into a list of numbers that can be compared.</li><li>Picking good features is an important part of a successful KNN algorithm.</li></ul><h3 id="Algorithms-Go-Next"><a href="#Algorithms-Go-Next" class="headerlink" title="Algorithms, Go Next"></a>Algorithms, Go Next</h3><ul><li><strong>Trees</strong>, self-banlance tree, B-trees, Red-black trees, Heaps, Splay trees.</li><li><strong>Inverted indexes</strong>, a hash that maps words to places where they appear.</li><li><strong>The Fourier transform</strong>, given a smoothie, the Fourier transform will tell you the ingredients in the smoothie.</li><li><strong>Parallel algorithms</strong>, consider for overhead of managing the parallelism and load balancing.</li><li><strong>Map Reduce</strong>, the map function and the reduce function.</li><li><strong>Bloom filters</strong>, Bloom filters are probabilistic data structures. Bloom filters are great because they take up very little space.<ul><li>False positives are possible. Google might say, “You’ve already crawled this site,” even though you haven’t.</li><li>False negatives aren’t possible. If the bloom filter says, “You haven’t crawled this site,” then you definitely haven’t crawled this site.</li></ul></li><li><strong>HyperLogLog</strong>, HyperLogLog approximates the number of unique elements in a set. Just like bloom filters, it won’t give you an exact answer, but it comes very close and uses only a fraction of the memory a task like this would otherwise take.</li><li><strong>The SHA algorithms</strong>, a one-way hash, can’t convert those hashes back to the original, and it’s locality insensitive, opposite with Simhash.</li><li><strong>Diffie-Hellman key exchange</strong>, private key and public key.</li><li><strong>Linear programming</strong>, is used to maximize something given some constraints, such as the knapsack problem.</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.geeksforgeeks.org/" target="_blank" rel="noopener">GeeksforGeeks</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dynamic-Programing&quot;&gt;&lt;a href=&quot;#Dynamic-Programing&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Programing&quot;&gt;&lt;/a&gt;Dynamic Programing&lt;/h3&gt;&lt;h4 id=&quot;k
      
    
    </summary>
    
      <category term="original" scheme="xvirt.ink/categories/original/"/>
    
    
      <category term="algorithm" scheme="xvirt.ink/tags/algorithm/"/>
    
      <category term="dynamic programing" scheme="xvirt.ink/tags/dynamic-programing/"/>
    
      <category term="k-nearest-neighbors" scheme="xvirt.ink/tags/k-nearest-neighbors/"/>
    
      <category term="more algorithms" scheme="xvirt.ink/tags/more-algorithms/"/>
    
  </entry>
  
</feed>
